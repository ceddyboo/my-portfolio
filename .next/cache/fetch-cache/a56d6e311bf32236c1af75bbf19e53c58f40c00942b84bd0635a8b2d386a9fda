{"kind":"FETCH","data":{"headers":{"alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Sat, 05 Jul 2025 22:21:17 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#playlistItemListResponse",
  "etag": "Cj6bgXAJw7cm3OoxFim8eQcVQjY",
  "nextPageToken": "EAAaHlBUOkNHUWlFRGc1UXpCRU9EY3hNREpCTWpOQ016SQ",
  "prevPageToken": "EAEaHlBUOkNESWlFREEyUkRreE9URkdRVFk1UWtNM05ERQ",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "FlQZN54tEGILkdWCo65ePY8AG30",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lk9iRVZzT1RYTFVv",
      "snippet": {
        "publishedAt": "2024-12-13T23:00:17Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I Bought A New Tractor",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nIn today's video I bought a new tractor, we worked on building walls in my $7,000 mansion's underground movie theater build, and Roman had his big armwrestling competition. \n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ObEVsOTXLUo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ObEVsOTXLUo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ObEVsOTXLUo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ObEVsOTXLUo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ObEVsOTXLUo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 50,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ObEVsOTXLUo"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_dl_nqfFMe_w9pvePODv76MqKMQ",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lm9XazJPUHlxdjNr",
      "snippet": {
        "publishedAt": "2024-12-11T21:00:29Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Building The Walls For My Farm's HUGE Mansion! (Pt. 1)",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nIn today's video we start building the walls for my farm's mansion.\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oWk2OPyqv3k/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oWk2OPyqv3k/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oWk2OPyqv3k/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oWk2OPyqv3k/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oWk2OPyqv3k/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 51,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oWk2OPyqv3k"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "EWTYXQksNGOeYh_E2YA7Xf_9cy4",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lk5MMURnREZDYWxj",
      "snippet": {
        "publishedAt": "2024-12-08T21:00:10Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Mansion's Concrete Forms Arrived! (42,000 POUNDS!)",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nIn today's farm adventure, I took delivery of 42,000 pounds of concrete forms for my Mansion's underground movie theater build! Concrete here we come.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/NL1DgDFCalc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/NL1DgDFCalc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/NL1DgDFCalc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/NL1DgDFCalc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/NL1DgDFCalc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 52,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "NL1DgDFCalc"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "UioJrEWOpIwRaHZmv29xmyLKWTg",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnRwbllEaFFKOWJj",
      "snippet": {
        "publishedAt": "2024-12-05T22:00:36Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I Left My New Job. I Am Going Back To The Farm.",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nIn today's adventure, I learned how to build the concrete foundation walls that I will be building in my mansion's underground movie theater. I also operated a MASSIVE excavator, poured concrete, and learned how to build a wall out of rebar. Today was a really good day. \n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tpnYDhQJ9bc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tpnYDhQJ9bc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tpnYDhQJ9bc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tpnYDhQJ9bc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tpnYDhQJ9bc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 53,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tpnYDhQJ9bc"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "cvWQcKNXJ2NAdM5nITXGQIRR_VM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lk9WeVFDSmxoYmJ3",
      "snippet": {
        "publishedAt": "2024-12-04T00:00:13Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My 2nd Day At My New Temporary Job!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nIn today's adventure I start my 2nd day at my new temporary job, where I am learning how to build the massive concrete walls that will be going in my $7,000 mansion's underground movie theater!\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/OVyQCJlhbbw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/OVyQCJlhbbw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/OVyQCJlhbbw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/OVyQCJlhbbw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/OVyQCJlhbbw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 54,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "OVyQCJlhbbw"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "OhD4oxGq2hqxR8Ec8dMuknEsbi0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmV3alYyY296Zjlz",
      "snippet": {
        "publishedAt": "2024-12-01T18:00:21Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I Got A New Job Off The Farm",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nIn today's adventure I start a new job where I learn how to build the massive concrete walls for my mansion's underground movie theater!\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ewjV2cozf9s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ewjV2cozf9s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ewjV2cozf9s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ewjV2cozf9s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ewjV2cozf9s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 55,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ewjV2cozf9s"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "aRKd9_59gx-tNhOsa3EOmeO_l1A",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkhQektFamlTYmRz",
      "snippet": {
        "publishedAt": "2024-11-29T19:00:09Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Building The Walls In My Mansion's Movie Theater",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nIn today's adventure we start building the walls in my Mansion's Underground Movie Theater.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HPzKEjiSbds/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HPzKEjiSbds/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HPzKEjiSbds/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HPzKEjiSbds/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HPzKEjiSbds/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 56,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "HPzKEjiSbds"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "sVyglnRTvdWsL_ASiRDXA10QqM0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmdSYWhFWExrY21z",
      "snippet": {
        "publishedAt": "2024-11-27T19:00:32Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Mansion's Movie Theater Is Ready For Wall Construction!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nIn today's adventure Roman and I work on my mansion's new underground movie theater. After 4 months of hard work, we are completely ready for wall construction.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/gRahEXLkcms/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/gRahEXLkcms/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/gRahEXLkcms/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/gRahEXLkcms/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/gRahEXLkcms/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 57,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "gRahEXLkcms"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CS7RV5jAsxmL9bFyDTdT6vhsrxA",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkJDSG1vYXNEbjBz",
      "snippet": {
        "publishedAt": "2024-11-23T19:00:04Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "We Are Done. The Underground Movie Theater Is Frozen.",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nIn today's farm adventure Roman and I install the last water removal system in my mansion's underground movie theater, we get our first snow of the year, I try not to turn into an ice cube, and we come up with a plan to install temporary heat in the mansion. \n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BCHmoasDn0s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BCHmoasDn0s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BCHmoasDn0s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BCHmoasDn0s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BCHmoasDn0s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 58,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BCHmoasDn0s"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7PRt_KDGbYIxNA3xwucXzaiBu1U",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmNDZ01MZGx4Q05F",
      "snippet": {
        "publishedAt": "2024-11-21T22:00:30Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Mansion's Kitchen Designs Are Here!",
        "description": "Get up to 47% off a Ridge Gift using this link! ► https://ridge.com/cole\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nIn today's farm adventure Roman and I work on waterproofing the underground movie theater in my mansion, I review designs for the mansion's new kitchen, and I give an update on the $1M Bin Site's Lawsuit.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/cCgMLdlxCNE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/cCgMLdlxCNE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/cCgMLdlxCNE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/cCgMLdlxCNE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/cCgMLdlxCNE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 59,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "cCgMLdlxCNE"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "GIf0p_0nDzqDryZsfc7v3qOI7RA",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlRmSW9ncm5EbzZV",
      "snippet": {
        "publishedAt": "2024-11-19T22:00:16Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building An Impossible To Flood Basement",
        "description": "Save 60% on your SimpliSafe security system when you sign up for a select Professional Monitoring plan. Visit https://simplisafe.com/cole to customize yours! Try SimpliSafe risk-free. If you don’t love it, return it for a full refund within 60 days.There’s No Safe Like SimpliSafe®\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\nI am building a movie theater deep underground. Today we are making it impossible to flood. \n\nOn today's adventure of the 100% restoration of my $7,000 mansion, we fire up the mini excavator, warm up the skid-loader, pick up some shovels, sling mud and start installing a brand new water draining system around my new underground movie theater. I also put together information for the $1M bin site lawsuit, I try to contact the IRS to get back $26,000 they took from me, I go to the store to buy more construction materials, and I even make it to armwrestling practice! Today was a really good day.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TfIogrnDo6U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TfIogrnDo6U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TfIogrnDo6U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TfIogrnDo6U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TfIogrnDo6U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 60,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TfIogrnDo6U"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "EkcJ90SNIFqEgGP3CBwBnSjhz0s",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmVWaDFmR1lCdGk4",
      "snippet": {
        "publishedAt": "2024-11-16T23:00:22Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: I DUG THE MOVIE THEATER TOO SMALL!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nI dug the hole for my mansion's underground movie theater too small. Today we dig it bigger.\n\nOn today's adventure of the 100% restoration of my $7,000 mansion, we pick up some shovels, fire up the mini excavator, and slide over the skid-loaders to dig a bigger hole for the underground movie theater. I also try to get back $26,000 that was taken from me, I order materials for the next part of the underground movie theater project, and I debut an exciting (extremely uncomfortable) piece of new equipment!\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/eVh1fGYBti8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/eVh1fGYBti8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/eVh1fGYBti8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/eVh1fGYBti8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/eVh1fGYBti8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 61,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "eVh1fGYBti8"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wskuEwsuStltL7lvdx04Yh9k_fI",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnNOQWRzU3NHMkYw",
      "snippet": {
        "publishedAt": "2024-11-14T22:00:35Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: OUR BIGGEST CONCRETE POUR IS DONE!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nI ordered 8 concrete trucks and asked 7 people to help me pour footings in my movie theater.\n\nWith the help of 8 strong backs, a lot of hand tools, and a concrete pumper, we completed my $7,000 mansion's largest concrete pour yet. Not a small task for a bunch of amateurs! Once the concrete was poured it started to rain so I built blueprints for the foundation walls. The massive project of restoring my Great-Great Grandfather's $7,000 mansion is being completed one step at a time!\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sNAdsSsG2F0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sNAdsSsG2F0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sNAdsSsG2F0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sNAdsSsG2F0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sNAdsSsG2F0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 62,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sNAdsSsG2F0"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Q4t9B7FC-onLarG_ByJ2l6nuEus",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnJRaHNxVHY2a1E0",
      "snippet": {
        "publishedAt": "2024-11-12T23:00:41Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: The Movie Theater Is Ready For Concrete!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nThe Underground Movie Theater is ready for concrete.\n\nIn today's episode we get the Underground Movie Theater 100% ready for concrete. Today we dig mud, spread rock, pack soil, lay 10's of thousands of pounds of rebar, order concrete, cut rebar, build extra forms, and lay in conduit for water lines. Today was a super productive day and we are 100% ready for concrete!\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rQhsqTv6kQ4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rQhsqTv6kQ4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rQhsqTv6kQ4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rQhsqTv6kQ4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rQhsqTv6kQ4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 63,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "rQhsqTv6kQ4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ruiXvl0_bWxJUDSx5v0a4R5IcQM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjNMQTNQaW5TSEVj",
      "snippet": {
        "publishedAt": "2024-11-09T23:00:04Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building The Most Overkill Foundation Ever!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nAfter today's building adventure, my mansion should stand for 1,000 years.\n\nIn today's episode we build the most overkill house foundation known to mankind (okay, I am exaggerating, but this thing is wild!) We work in mud, battle rain that is trying to erase our hard work, prepare tens of thousands of pounds of structural steel rebar, and we even put on our thinking caps and do math equations to ensure the new Underground Movie Theater will be straight with the existing house.\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3LA3PinSHEc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3LA3PinSHEc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3LA3PinSHEc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3LA3PinSHEc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3LA3PinSHEc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 64,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3LA3PinSHEc"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "NVAGVP3paFpbZ31KuuvaOj9Y81I",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lmc4NkNkYUk5MlpV",
      "snippet": {
        "publishedAt": "2024-11-07T23:00:34Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Flooding In The Movie Theater...",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nWater + Underground Movie Theater = A Big Mess.\n\nIn today's episode Roman and I install rebar in the underground movie theater, we dig out and straighten concrete footings, we lay down string lines to make sure our concrete forms are square, and we prepare the underground movie theater for a big thunderstorm.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/g86CdaI92ZU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/g86CdaI92ZU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/g86CdaI92ZU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/g86CdaI92ZU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/g86CdaI92ZU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 65,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "g86CdaI92ZU"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "xZZk9sJC-dqSiriOp_DpfoFhFq0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkFSZ3Juc19ETjVv",
      "snippet": {
        "publishedAt": "2024-11-06T00:00:10Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Rebar For The Movie Theater Arrived!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nToday we took a massive delivery of rebar for the Underground Movie Theater Addition in my $7,000 Mansion! My friend Roman and I are trying our best to get everything prepared and installed so we can pour concrete before the weather changes for the worst. The delivery of this rebar is going to speed things up big time. Concrete pouring, here we come!\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ARgrns_DN5o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ARgrns_DN5o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ARgrns_DN5o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ARgrns_DN5o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ARgrns_DN5o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 66,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ARgrns_DN5o"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "IwR6MfS8Pdi6rTbXmdA15I89zOI",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lm5hVE9vRk84Undj",
      "snippet": {
        "publishedAt": "2024-11-03T17:00:50Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Almost Ready To Pour The Movie Theater!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nToday we are getting things ready to pour concrete for the new movie theatre in my Great-Great Grandfather's $7,000 Mansion. \n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/naTOoFO8Rwc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/naTOoFO8Rwc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/naTOoFO8Rwc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/naTOoFO8Rwc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/naTOoFO8Rwc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 67,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "naTOoFO8Rwc"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "fqYekFw6iIyiKR2vHhuVGGRI0d0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmJXT0d1WmZWVXlj",
      "snippet": {
        "publishedAt": "2024-10-31T23:00:36Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "$1,000,000 Bin Site Lawsuit Update",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nThis is an update about the lawsuit on the $1,000,000 bin site and an update on the restoration and remodel of my Great-Great Grandfather's $7,000 Mansion.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bWOGuZfVUyc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bWOGuZfVUyc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bWOGuZfVUyc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bWOGuZfVUyc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bWOGuZfVUyc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 68,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bWOGuZfVUyc"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nVmXRRZRyAE6qXCc9u0y5knCOUk",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlgwMVJ6dUU5UHdr",
      "snippet": {
        "publishedAt": "2024-10-29T23:00:30Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Farm is Expected To Lose $376,000 This Year",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nIn today's episode we finish harvest 2024, we also help 2 neighbors finish harvest, to add to that I go over the farm's harvest yield results (record breaking), and I breakdown how the farm is projected to lose $376,000 this year. \n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/X01RzuE9Pwk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/X01RzuE9Pwk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/X01RzuE9Pwk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/X01RzuE9Pwk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/X01RzuE9Pwk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 69,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "X01RzuE9Pwk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0pcL-NcTiT4QNeXEWSbz-EAwoss",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lklld2NPaW1lMlM4",
      "snippet": {
        "publishedAt": "2024-10-26T22:00:08Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "We Finished The Concrete Forms In My Mansion's Movie Theatre Build",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nIn today's adventure we finish laying concrete forms for the underground movie theatre foundation footing, and we harvest 3 corn fields which means we have 1 corn field left and then harvest is complete. \n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/IewcOime2S8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/IewcOime2S8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/IewcOime2S8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/IewcOime2S8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/IewcOime2S8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 70,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "IewcOime2S8"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "JJoO51OU6Uorim_Cg283vCMnooo",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjFnZk1GZHVleDFv",
      "snippet": {
        "publishedAt": "2024-10-24T21:00:01Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I Made $100,000 In A Day On My Farm!",
        "description": "RIDGE WALLET: https://ridge.com/cole [10% OFF CODE: COLE]\nBig thanks to Ridge for sponsoring this video!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nIn today's adventure we combine $178,000 of corn and start setting up concrete forms for the underground movie theatre in my $7,000 mansion!\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1gfMFduex1o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1gfMFduex1o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1gfMFduex1o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1gfMFduex1o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1gfMFduex1o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 71,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1gfMFduex1o"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9svMeepjf8CQRUOphdGA89HLaKI",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lm1EY1YwZkVzNU9z",
      "snippet": {
        "publishedAt": "2024-10-22T19:00:32Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Can My Farm Break A New Speed Record? (This Is Wild!)",
        "description": "Get the Chairman™ Pro Package for 20% OFF + Free International Shipping with promo code COLE at Manscaped.com! #manscapedpartner \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nIn today's adventure we approach being 50% complete with corn harvest and we prepare the underground movie theatre for concrete!\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mDcV0fEs5Os/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mDcV0fEs5Os/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mDcV0fEs5Os/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/mDcV0fEs5Os/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/mDcV0fEs5Os/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 72,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "mDcV0fEs5Os"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "P0CS62-gUeBmEH931Xa0OHUVpmk",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlFwa2c3TFVqVTNF",
      "snippet": {
        "publishedAt": "2024-10-19T17:00:18Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "We Are Done Digging My $7,000 Mansion's Movie Theatre!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nIn today's adventure we dive into a new corn field to harvest and finish digging the rest of the underground movie theatre in my $7,000 mansion! \n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Qpkg7LUjU3E/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Qpkg7LUjU3E/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Qpkg7LUjU3E/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Qpkg7LUjU3E/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Qpkg7LUjU3E/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 73,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Qpkg7LUjU3E"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "cYlN5tteukquAzijaKq7bgNxy2M",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlFiSWFOWWUyQjdB",
      "snippet": {
        "publishedAt": "2024-10-17T23:00:15Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Our Farm's Best Crop EVER!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nIn today's adventure we attempt to harvest our farm's best crop ever and dig the footings for my mansion's underground movie theatre. To put it lightly, we have our hands full today!\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/QbIaNYe2B7A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/QbIaNYe2B7A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/QbIaNYe2B7A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/QbIaNYe2B7A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/QbIaNYe2B7A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 74,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "QbIaNYe2B7A"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QLufgvEPKVIL-E5NZCZ3Tndj9oI",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LklMVFhWNEVTWkxz",
      "snippet": {
        "publishedAt": "2024-10-15T23:00:11Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Farm Broke A New Record",
        "description": "Save 50% on your system, plus a free indoor security camera and your first month is free when you sign up for Core Monitoring. Visit https://SimpliSafe.com/cole to customize yours! Try SimpliSafe risk-free. If you don’t love it, return it for a full refund within 60 days.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nI am building a movie theatre in my mansion DIY style, all while in the middle of my busiest farming season of the year, grain harvest. Today I am attempting to start corn harvest and fix a mistake we made while digging the underground movie theatre.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ILTXV4ESZLs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ILTXV4ESZLs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ILTXV4ESZLs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ILTXV4ESZLs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ILTXV4ESZLs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 75,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ILTXV4ESZLs"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "w7LxlJWP3hXz8PcWgYm2jv-5zu4",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lk9sSFkyeDRrVk44",
      "snippet": {
        "publishedAt": "2024-10-13T20:00:14Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Mansion Is A Work In Progress & The Farm Is Thriving!",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nI am building a movie theatre in my mansion DIY style, all while in the middle of my busiest farming season of the year, grain harvest. Today I am attempting to dig the concrete foundation footings in the underground movie theatre as well as keep the farm running smoothly to allow us to continue harvesting crops from the field. Today I run heavy equipment (like the combine, semis, and tractors), dig tons of dirt and rock by hand, and conquer some of my least favorite (but important) jobs on the farm.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/OlHY2x4kVN8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/OlHY2x4kVN8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/OlHY2x4kVN8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/OlHY2x4kVN8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/OlHY2x4kVN8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 76,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "OlHY2x4kVN8"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "tvYPTdlvWAHbonnWpOmq5piQogc",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkJteTRZTGZyZmVj",
      "snippet": {
        "publishedAt": "2024-10-10T20:00:07Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Mansion Build Is Going Slower Than Expected",
        "description": "I am building a movie theatre in my mansion. Today I am attempting to finish digging the concrete foundation footings, all while being in the middle of my busiest season of the year on the farm: harvest. Today I run heavy equipment, dig tons of dirt, remove and replace thousands of pounds of rock, and keep things running smoothly on the farm.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Bmy4YLfrfec/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Bmy4YLfrfec/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Bmy4YLfrfec/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Bmy4YLfrfec/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Bmy4YLfrfec/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 77,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Bmy4YLfrfec"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "iLtDkeD-MB0X0GP8rarXmSRKQ8Q",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjhhSjJsRjZrZVRB",
      "snippet": {
        "publishedAt": "2024-10-08T23:00:10Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building The Movie Theatre Foundation (Pt. 2)",
        "description": "I am building a movie theatre in my mansion. Today I am attempting to build the areas where the foundation concrete is going to go, all while being in the middle of my busiest season of the year on the farm: harvest. Today I dig dirt, shovel rock, run heavy equipment, combine crops, and drive semis. I also discovered a few problems along the way like hitting ground water, and realizing we dug the underground movie theatre area too small. \n\n► Drive-Over Conveyor: https://www.davetheaugerman.com/\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8aJ2lF6keTA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8aJ2lF6keTA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8aJ2lF6keTA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8aJ2lF6keTA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8aJ2lF6keTA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 78,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8aJ2lF6keTA"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Gvsxmav9y_584zalIk4qZgJwFVQ",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjMwQVZ3ZXp2TnRB",
      "snippet": {
        "publishedAt": "2024-10-06T19:00:01Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building The Movie Theatre Foundation (Pt. 1)",
        "description": "I am doing a 100% DIY restoration and remodel on my mansion that was purchased for $7,000. Today I start construction on the movie theatre foundation. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/30AVwezvNtA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/30AVwezvNtA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/30AVwezvNtA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/30AVwezvNtA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/30AVwezvNtA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 79,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "30AVwezvNtA"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "st5hwwCID1cCBJtAISAUG6PTjQM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnBjYWk1RnNOLXJB",
      "snippet": {
        "publishedAt": "2024-10-03T23:00:26Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Starting On The Underground Movie Theatre",
        "description": "Today we start working on the underground movie theatre in my $7,000 mansion.\n\nIf you really enjoyed this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pcai5FsN-rA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pcai5FsN-rA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pcai5FsN-rA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pcai5FsN-rA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pcai5FsN-rA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 80,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pcai5FsN-rA"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "w6KIMg3CiLuE5gluiN0AdZXBuQU",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmY1bDlMQlp5Tnpr",
      "snippet": {
        "publishedAt": "2024-10-01T21:00:31Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building A Brand New Basement Wall",
        "description": "My 1917 mansion's basement needs a complete rebuild. In an attempt to make the basement safe strong, and livable, over the past several months we have been rebuilding nearly the entire thing. Today we are building a new load bearing wall that will hold up the kitchen.\n\nIf you really enjoyed this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/f5l9LBZyNzk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/f5l9LBZyNzk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/f5l9LBZyNzk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/f5l9LBZyNzk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/f5l9LBZyNzk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 81,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "f5l9LBZyNzk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "emdLOEcbc4a6Bp07JnmO28MKiDo",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lnl6MTluVEY1ZWRV",
      "snippet": {
        "publishedAt": "2024-09-29T17:00:45Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: We Made A Mistake Building The Basement",
        "description": "Get The Beard & Body Bundle for 20% OFF + Free International Shipping with promo code COLE at Manscaped.com! #manscapedpartner \n\nMy 1917 mansion's basement needs a complete rebuild. In an attempt to make the basement safer, stronger, and livable, over the past several months we have been rebuilding nearly the entire thing. Today we are attempting to build a brand new load bearing wall.\n\nIf you really enjoyed this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/yz19nTF5edU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/yz19nTF5edU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/yz19nTF5edU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/yz19nTF5edU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/yz19nTF5edU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 82,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "yz19nTF5edU"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "dIvko6m2kYnIsLLMaltZcLbOIZM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lno0TWwxV3VzNEdN",
      "snippet": {
        "publishedAt": "2024-09-26T23:00:54Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Rebuilding The Basement (Welding I-Beams!)",
        "description": "My 1917 mansion's basement needs a complete rebuild. In an attempt to make the basement safer, stronger, and livable, over the past several months we have been rebuilding virtually everything and today we are working on one of the final steps, which is to weld together the I-beams that are supporting the house. After today, we will be able to remove all the center support posts in the basement which will turn the basement from 5 rooms, to 3!\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/z4Ml1Wus4GM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/z4Ml1Wus4GM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/z4Ml1Wus4GM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/z4Ml1Wus4GM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/z4Ml1Wus4GM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 83,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "z4Ml1Wus4GM"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "RQ4XSONOdNFdi3NNy-1lI_dSF6A",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkVKallwSk9USDZN",
      "snippet": {
        "publishedAt": "2024-09-24T23:00:16Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Finishing The Basement Rebuild (Pouring Foundation!)",
        "description": "My 1917 mansion's basement needs a complete rebuild. In an attempt to make the basement safer, stronger, and livable, over the past several months we have been rebuilding virtually everything and today we are working on one of the final steps, which is to pour a brand new foundation wall, and pour concrete for the kitchen support wall to be built on.\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EJjYpJOTH6M/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EJjYpJOTH6M/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EJjYpJOTH6M/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EJjYpJOTH6M/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EJjYpJOTH6M/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 84,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EJjYpJOTH6M"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "yuXAgRB-NT89lFbzK9F8GQZtTS8",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmNJZkF2QVcwSkFV",
      "snippet": {
        "publishedAt": "2024-09-22T17:00:24Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Finishing The Basement Rebuild (Pt. 6)",
        "description": "My 1917 mansion's basement needed a complete rebuild. In an attempt to make the basement safer, stronger, and livable, over the past several months we have been rebuilding virtually everything and today we are on the final step, which is to rebuild the basement wall that holds up the kitchen. Get ready for a lot of dust, sweat, and hard work. Today's project is not a joke.\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► THE FULL SEMI FENDERS: https://robmarplastics.com/fenders\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/cIfAvAW0JAU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/cIfAvAW0JAU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/cIfAvAW0JAU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/cIfAvAW0JAU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/cIfAvAW0JAU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 85,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "cIfAvAW0JAU"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "fNrh4IsjN4R2MgTE0nXulQSvucA",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjN0QWNEN2dDbmZV",
      "snippet": {
        "publishedAt": "2024-09-19T21:30:00Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Finishing The Basement Rebuild (Pt. 5)",
        "description": "To learn more about Chomps or to find one of the 20,000 stores near you that carry Chomps go to https://chomps.com/colethecornstar\n\nMy 1917 mansion's basement needed a complete rebuild. In an attempt to make the basement safer, stronger, and livable, over the past several months we have been rebuilding virtually everything and we are now on the final step, which is to destroy the final remaining old stone wall, and rebuild it.\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► THE FULL SEMI FENDERS: https://robmarplastics.com/fenders\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3tAcD7gCnfU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3tAcD7gCnfU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3tAcD7gCnfU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3tAcD7gCnfU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3tAcD7gCnfU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 86,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3tAcD7gCnfU"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7TnznE09OIa-9Nx13r14I1tCZ0o",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmU3blF1ZzRZTVRV",
      "snippet": {
        "publishedAt": "2024-09-17T22:30:05Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Finishing The Basement Rebuild (Pt. 4)",
        "description": "My 1917 mansion's basement needed a complete rebuild. In an attempt to make the basement safer, stronger, and livable, over the past several months we have been rebuilding virtually everything and we are now on the final step, which is to install giant steel I-beams that will support most of the house. Today we are setting the final 3 I-Beams. Once we get all the I-beams installed, we will be able to rip down the basement dividing walls and remove the center posts, which will turn the what-used-to-be 5-room basement into 3!\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► THE FULL SEMI FENDERS: https://robmarplastics.com/fenders\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/e7nQug4YMTU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/e7nQug4YMTU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/e7nQug4YMTU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/e7nQug4YMTU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/e7nQug4YMTU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 87,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "e7nQug4YMTU"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "iRZatduwbVINKiLsL3SAcZ2AECY",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkozUE9TZlBpWlpV",
      "snippet": {
        "publishedAt": "2024-09-15T18:00:08Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Finishing The Basement Rebuild (Pt. 3)",
        "description": "My 1917 mansion's basement needed a complete rebuild. In an attempt to make the basement safer, stronger, and livable, over the past several months we have been rebuilding virtually everything and we are now on the final step, which is to install giant steel I-beams that will support most of the house. Today we are pouring concrete for the I-beams to be supported on. Once we get all the I-beams installed, we will be able to rip down the basement dividing walls and remove the center posts, which will turn the what-used-to-be 5-room basement into 3!\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► THE FULL SEMI FENDERS: https://robmarplastics.com/\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/J3POSfPiZZU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/J3POSfPiZZU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/J3POSfPiZZU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/J3POSfPiZZU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/J3POSfPiZZU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 88,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "J3POSfPiZZU"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "lu-xzO9pCmkxsNdkJsH1g6Xx1s8",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnlMRmdhRzgxRmNr",
      "snippet": {
        "publishedAt": "2024-09-13T22:00:43Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Finishing The Basement Rebuild (Pt. 2)",
        "description": "My 1917 mansion's basement needed a complete rebuild. In an attempt to make the basement safer, stronger, and livable, over the past several months we have been rebuilding virtually everything and we are now on the final step, which is to install giant steel I-beams that will support most of the house. Today we are installing the first I-beam. Once we get all the I-beams installed, we will be able to rip down the basement dividing walls and remove the center posts, which will turn the what-used-to-be 5-room basement into 3!\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► THE FULL SEMI FENDERS: https://robmarplastics.com/\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/yLFgaG81Fck/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/yLFgaG81Fck/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/yLFgaG81Fck/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/yLFgaG81Fck/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/yLFgaG81Fck/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 89,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "yLFgaG81Fck"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "K0Z3GiXmxWVQFU8ffRKsrXJ7do8",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmhIOXA5QXVVYXBv",
      "snippet": {
        "publishedAt": "2024-09-11T00:15:02Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Finishing The Basement Rebuild (Pt. 1)",
        "description": "My 1917 mansion's basement needed a complete rebuild. Over the last several months we have been rebuilding virtually everything and we are now on the final steps. Today we are installing concrete supports for giant beams to sit on. Once we get our giant beams installed, we will be able to rip down a bunch of dividing walls and remove all the center posts, which will turn the what-used-to-be 5-room basement into 3!\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/hH9p9AuUapo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/hH9p9AuUapo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/hH9p9AuUapo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/hH9p9AuUapo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/hH9p9AuUapo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 90,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "hH9p9AuUapo"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "UCyqB1KQftILlCcRakvn59Hal-M",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lm9xYjlRUEJvWHg0",
      "snippet": {
        "publishedAt": "2024-09-08T18:00:31Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Pouring A New Foundation Wall",
        "description": "Part of my mansion was built with a foundation wall that was so small, I don't know how the house did not fall down. This video is about building a new foundation wall in place of the almost non-existent old wall in my 1917 farm house (mansion).\n\nWe start today's massive project by removing and forming the dirt underneath the mansion's tiny existing foundation wall. We then dug access holes from the surface to be able to pour concrete into the top of our freshly dug new foundation wall location. After that we installed a rebar cage, formed up wooden concrete forms, and then started pouring concrete!\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oqb9QPBoXx4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oqb9QPBoXx4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oqb9QPBoXx4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oqb9QPBoXx4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oqb9QPBoXx4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 91,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oqb9QPBoXx4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5Q0TOWJcLRAzaP-dc7TUBUT3l6g",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjJvWkd3cDQyTTBz",
      "snippet": {
        "publishedAt": "2024-09-06T22:30:00Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Rebuilding The Basement Entrance (Pt. 2)",
        "description": "This video is about the continuation of rebuilding the old basement entrance in my 1917 farm house (mansion).\n\nThe video begins by giving a brief scope of work for the day and then quickly into getting things tore apart and rebuilt. The first main task of the day is to remove the old concrete foundation in the basement entrance, remove the last remains of the old chimney, and then remove a bunch of dirt to lower the basement floor. The second main task of the day is to dig out, rebar, re-brace, and pour a brand new concrete footing to support a gigantic steel I-beam. The goal of today's project is to work toward being able to remove all of the poles that are holding up the basement. After all the work today, we are one step closer!\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2oZGwp42M0s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2oZGwp42M0s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2oZGwp42M0s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2oZGwp42M0s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2oZGwp42M0s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 92,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2oZGwp42M0s"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "jkn6EoBHpd56eFqiyugQevxwvGc",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkFnN082NlVWUlBr",
      "snippet": {
        "publishedAt": "2024-09-04T22:30:03Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Rebuilding The Basement Entrance (Pt. 1)",
        "description": "This video is about rebuilding the basement entrance in my 1917 farm house (mansion).\n\nThe video begins by giving a brief scope of work for the day and then quickly into getting things tore apart and rebuilt. The first main task of the day is to remove the soil underneath the house's main entrance-way, brace the walls holding the main entrance-way up, and then remove the old concrete foundation. The second main task of the day was to figure out what supplies will be needed for the underground movie theatre addition, and for the remaining work that needs to be done in the basement. \n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Ag7O66UVRPk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Ag7O66UVRPk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Ag7O66UVRPk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Ag7O66UVRPk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Ag7O66UVRPk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 93,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Ag7O66UVRPk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qGjt2vSzqdLudv2kYAV8qU7UvRo",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkFsUVp4Vmt4X25n",
      "snippet": {
        "publishedAt": "2024-09-01T23:30:04Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Big Project Update",
        "description": "This video is a construction project update on the 100% restoration and remodel of my 1917 farm house (mansion). We have officially been working on the house for 8 months.\n\nThe video begins by giving a small brief about myself, and then quickly jumps into everything we have accomplished outside and inside the house so far. Once the recap is completed, I walk around the house and go over how the house is laid out, and what construction still needs to be done. I also discuss things like the project completion timeline, the project budget, the hardest part of the project, and if I would do anything differently. I wrap up the video with a few questions, and talk about some of the supplies that I need to order.\n\nIf you really enjoy this video, no need to worry, there is an incredible amount of mansion to be built! There will be many more videos to come!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AlQZxVkx_ng/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AlQZxVkx_ng/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AlQZxVkx_ng/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AlQZxVkx_ng/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AlQZxVkx_ng/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 94,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AlQZxVkx_ng"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "hOfR6A2YyasC_A8NU7QIPCowRlM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnBtVzRhTXB1b3Nv",
      "snippet": {
        "publishedAt": "2024-08-29T22:30:12Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building A Waterproof Underground Theatre (Pt. 3/3)",
        "description": "Get a special edition of The Lawn Mower® 5.0 Ultra White for 20% OFF + Free Shipping with promo code COLE at manscaped.com! #manscapedpartner \n\nThis video is the continuation of building a waterproof underground movie theatre in my 1917 farm house (mansion). The video begins by jumping right into finishing the waterproofing underneath the underground movie theatre. My crew and I have invested a lot of time into this underground movie theatre build. This video highlights some of the work we have done. Today was one of the hottest days of the year, so our work was definitely cut out for us! If you really enjoy this video, no need to worry, this is just the start of the underground movie theatre build. There will be many more videos to come, and many other incredible rooms are going to built on the house as well!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pmW4aMpuoso/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pmW4aMpuoso/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pmW4aMpuoso/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pmW4aMpuoso/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pmW4aMpuoso/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 95,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pmW4aMpuoso"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "hBlW5Aw1bFTS8dICd53MZX8CPXE",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LllRTlQ0UXBwNEFN",
      "snippet": {
        "publishedAt": "2024-08-27T23:01:08Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building A Waterproof Underground Theatre (Pt. 2)",
        "description": "This video is the continuation of building a waterproof underground movie theatre in my 1917 farm house (mansion). The video begins with a small background story on the underground movie theatre build and then quickly jumps into our first set of problems to solve for the day. My crew and I have invested a lot of time into this underground movie theatre build. This video highlights some of the work we have done. If you really enjoy this video, no need to worry, this is just the start of the underground movie theatre build. There will be many more videos to come, and many other incredible rooms are going to built on the house as well!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YQNT4Qpp4AM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YQNT4Qpp4AM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YQNT4Qpp4AM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YQNT4Qpp4AM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YQNT4Qpp4AM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 96,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YQNT4Qpp4AM"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "x7xpN4mZXbHm3XcupbTXm6ukkxE",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Ll9vRkVLQWwtcWdV",
      "snippet": {
        "publishedAt": "2024-08-22T23:15:02Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Farm Has A $1,358,000 Problem",
        "description": "My farm has spent $1,358,000 so far on this year's crop. I have not produced any income and bills keep racking up. Crop prices are down big time but we have potential for excellent yields. Will the farm make enough money to turn a profit, or will we slide further into debt? Today I attempt to answer these questions.\n \n► Ever.Ag: https://www.ever.ag/crops/financial-services/?utm_source=Youtube&utm_medium=Organic_Post&utm_campaign=GrainFoundationsInfluencer\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_oFEKAl-qgU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_oFEKAl-qgU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_oFEKAl-qgU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_oFEKAl-qgU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_oFEKAl-qgU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 97,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_oFEKAl-qgU"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "A5OW2iECf3U6N4NXZn9K6FKb94g",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlNmWE84eWpaR2pR",
      "snippet": {
        "publishedAt": "2024-08-18T21:00:25Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building A Waterproof Underground Theatre (Pt. 1)",
        "description": "To learn more about Chomps or to find one of the 20,000 stores near you that carry Chomps go to https://chomps.com/colethecornstar\n\nThis video is all about building a waterproof underground movie theatre in my 1917 farm house (mansion). The video starts with a little background history on what is going on with the underground movie theatre and then quickly jumps into the task at hand. I have invested a lot of time into designing, planning, and getting started on the underground movie theatre build. This video showcases some of the work I have done. Do not worry, this video is just the start of the underground movie theatre build. There will be many more videos to come, and many other super cool rooms are going to be built onto the house as well!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SfXO8yjZGjQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SfXO8yjZGjQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SfXO8yjZGjQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SfXO8yjZGjQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SfXO8yjZGjQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 98,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SfXO8yjZGjQ"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "zfVASeWdBG5epV5e5UMn2Ave1aE",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlNoZFcxZGhqbWZF",
      "snippet": {
        "publishedAt": "2024-08-15T23:30:08Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Draining The 2nd Swamp Under My House",
        "description": "Save 20% on your system and your first month is free when you sign up for Fast Protect Monitoring. Visit https://SimpliSafe.com/cole to customize yours! Try SimpliSafe risk-free. If you don’t love it, return it for a full refund within 60 days.\n\nI discovered an unknown new second swamp under my incredible $7,000 mansion. Today I drained it.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ShdW1dhjmfE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ShdW1dhjmfE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ShdW1dhjmfE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ShdW1dhjmfE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ShdW1dhjmfE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 99,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ShdW1dhjmfE"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 931,
    "resultsPerPage": 50
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=UUuxlXCfVyV-i5YLL30jkomw&maxResults=50&pageToken=EAAaHlBUOkNESWlFREEyUkRreE9URkdRVFk1UWtNM05ERQ&key=AIzaSyCEkGuXKRRpAIMkBkeEJ0EknB-ze5233GU"},"revalidate":86400,"tags":[]}