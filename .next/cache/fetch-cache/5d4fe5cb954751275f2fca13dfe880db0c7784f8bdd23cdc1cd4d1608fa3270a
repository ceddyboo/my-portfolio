{"kind":"FETCH","data":{"headers":{"alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Sat, 05 Jul 2025 22:21:17 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#playlistItemListResponse",
  "etag": "Em29PbcqqRbSfxjDWZAr2DAVJP4",
  "nextPageToken": "EAAaH1BUOkNKWUJJaEJFTURrelJUVkNNREk1UkVSRlFqaEY",
  "prevPageToken": "EAEaHlBUOkNHUWlFRGc1UXpCRU9EY3hNREpCTWpOQ016SQ",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "8HjyShj17OD4qwo6gBsn1q7r16o",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmoxWHJBdjF4aUVZ",
      "snippet": {
        "publishedAt": "2024-08-13T21:00:21Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Finishing The Underground Movie Theatre Hole",
        "description": "Get free life insurance quotes from America's top insurers and start saving today with Policygenius: http://policygenius.com/colethecornstar. Thanks to Policygenius for sponsoring this video!\n\nI am doing a 100% restoration and remodel on my mansion that was purchased for $7,000. Part of the restoration and remodel is the addition of an underground movie theatre. Today I finish digging the massive hole the underground movie theatre is going to go inside of.  \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/j1XrAv1xiEY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/j1XrAv1xiEY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/j1XrAv1xiEY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/j1XrAv1xiEY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/j1XrAv1xiEY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 100,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "j1XrAv1xiEY"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "FuAniT89YR2LfWtMK2gpGWWFRYo",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmpET1ZOMDhwa1lr",
      "snippet": {
        "publishedAt": "2024-08-11T18:00:21Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Digging The Underground Movie Theatre (Pt. 4)",
        "description": "I am doing a 100% restoration and remodel on my mansion that was purchased for $7,000. Part of the restoration and remodel is the addition of an underground movie theatre. Today I am working on re-lowering the job site's water table, and digging out more of the underground movie theatre.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jDOVN08pkYk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jDOVN08pkYk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jDOVN08pkYk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jDOVN08pkYk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jDOVN08pkYk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 101,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jDOVN08pkYk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SBZsWZ-DGUgatdvG3KvpFYOrGYA",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjFfYnVkUG5Sdzgw",
      "snippet": {
        "publishedAt": "2024-08-09T00:30:01Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Draining The Swamp Under The House",
        "description": "I am doing a 100% restoration and remodel on my mansion that was purchased for $7,000. Today I discovered I have a swamp under my house, so I dug a massive trench to drain it. \n\n► Vote For Community Hero Award: https://www.facebook.com/share/AGv8zA892ERjZhUY/?mibext\n\n► Donate To The Ronald McDonald Foundation: https://donorbox.org/gcss2024\n► (Type in \"Izzie\" or \"Steer 9\" To give Izzie the credit!)\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1_budPnRw80/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1_budPnRw80/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1_budPnRw80/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1_budPnRw80/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1_budPnRw80/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 102,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1_budPnRw80"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9WZpXOMp0VG4PGTRaymzoMu53bk",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmQ4M2g2emhOWC1z",
      "snippet": {
        "publishedAt": "2024-08-06T23:00:18Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Digging The Underground Movie Theatre (Pt. 3)",
        "description": "I am building an incredible underground movie theatre in my mansion. Today I am digging the massive hole it is going to be built inside of. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/d83h6zhNX-s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/d83h6zhNX-s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/d83h6zhNX-s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/d83h6zhNX-s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/d83h6zhNX-s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 103,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "d83h6zhNX-s"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "THPpUcz4vXcN0ngylgA1oFwbmEA",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnJ5U25kWERkUENn",
      "snippet": {
        "publishedAt": "2024-08-03T21:30:05Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Hand Digging A New Basement Wall",
        "description": "Upon discovering no footing and hardly any foundation under a corner of the house, I dive into my $7,000 mansion's most important project yet.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rySndXDdPCg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rySndXDdPCg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rySndXDdPCg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rySndXDdPCg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rySndXDdPCg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 104,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "rySndXDdPCg"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "oDoYR9AHajl5AKfufutsRnXWHZ0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlRhX2Q3eGRZclQ0",
      "snippet": {
        "publishedAt": "2024-08-01T21:00:18Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Digging The Underground Movie Theatre (Pt. 2)",
        "description": "I am building an underground movie theatre in my mansion. Today I am attempting to dig out the hole where the theatre is going to be located. I operate a mini excavator, drive a skid loader, dig and haul dirt, locate and move a buried gas line, fix a broken dump truck, set up new tools to help us with the project, plus I learn a lot and have a lot of fun. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Ta_d7xdYrT4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Ta_d7xdYrT4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Ta_d7xdYrT4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Ta_d7xdYrT4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Ta_d7xdYrT4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 105,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Ta_d7xdYrT4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PXddBwzS4Pg5YHqJuDFpIZTDTao",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnVsTzl4NGJZMFV3",
      "snippet": {
        "publishedAt": "2024-07-30T23:30:10Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building A Radon Mitigation System",
        "description": "My mansion is getting a 100% remodel and restoration. Today I am building and installing a radon mitigation system as well as finishing the plumbing in the basement. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ulO9x4bY0Uw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ulO9x4bY0Uw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ulO9x4bY0Uw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ulO9x4bY0Uw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ulO9x4bY0Uw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 106,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ulO9x4bY0Uw"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "llq0L6FQSN5bRPBKMJpsCHGzUq0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmprRDdqWEMwMjJZ",
      "snippet": {
        "publishedAt": "2024-07-28T23:30:08Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Digging The Underground Movie Theatre (Pt. 1)",
        "description": "I am building an underground movie theatre in my mansion. Today we start digging the foundation. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jkD7jXC022Y/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jkD7jXC022Y/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jkD7jXC022Y/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jkD7jXC022Y/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jkD7jXC022Y/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 107,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jkD7jXC022Y"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Jaey0QslRJU2m-ZqWC2MEoYPQhU",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjFoaXBVZzF5VnlR",
      "snippet": {
        "publishedAt": "2024-07-26T20:00:00Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Preparing The Property For The New Addition",
        "description": "I am building an addition on my mansion. Today I attempt to clean up and measure out the area where the future addition is going to be. I drive the skid loader, drive the dump truck, scoop up a huge soil pile, figure out where we are going to put the excess soil from the job site, fill out driveway permits, and start building a new driveway. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1hipUg1yVyQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1hipUg1yVyQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1hipUg1yVyQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1hipUg1yVyQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1hipUg1yVyQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 108,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1hipUg1yVyQ"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "WJ6TyEHm37WX52JJ-rhRHTt3nK0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnVpOHhrTDZmVm5Z",
      "snippet": {
        "publishedAt": "2024-07-23T23:00:33Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Removing The Concrete Mountain",
        "description": "My mansion is getting an addition. Today I am attempting to remove the concrete mountain that is in the way of us being able to build the new garage and bedrooms. I fix the dump truck, load giant chunks of concrete, operate large equipment, defy physics, Roman finishes plumbing the basement, I smooth out the rough driveway, and I learn a lot and have a lot of fun along the way.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ui8xkL6fVnY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ui8xkL6fVnY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ui8xkL6fVnY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ui8xkL6fVnY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ui8xkL6fVnY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 109,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ui8xkL6fVnY"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "hbhzbINXOBZxMhTKLyXmrKqhf-4",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkdfY00wdS12d0Nn",
      "snippet": {
        "publishedAt": "2024-07-20T23:00:14Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Demolishing Concrete For The New Addition",
        "description": "To learn more about Chomps or to find one of the 20,000 stores near you that carry Chomps go to https://chomps.com/colethecornstar\n\nMy mansion is getting an addition. Today I am attempting to prepare the work area around the house for the new garage and bedrooms. I come up with a plan, fix a dump truck, operate large equipment, break and remove old concrete, load a dump truck, run a demolition saw, and learn a lot along the way.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/G_cM0u-vwCg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/G_cM0u-vwCg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/G_cM0u-vwCg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/G_cM0u-vwCg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/G_cM0u-vwCg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 110,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "G_cM0u-vwCg"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0r4eWfD6E-rUmOOeEGi0gbznJXY",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkJGSy1YUXRSQnRV",
      "snippet": {
        "publishedAt": "2024-07-19T00:30:04Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building The Basement Plumbing",
        "description": "My mansion needs a new basement. Today I am attempting to build the plumbing in the basement. I shovel a lot of rock and dirt, set floor drains, pour concrete, calculate slope for sewage pipes, build a french drain, install a sump pump drain line, survive a thunderstorm, and learn a lot along the way.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BFK-XQtRBtU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BFK-XQtRBtU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BFK-XQtRBtU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BFK-XQtRBtU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BFK-XQtRBtU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 111,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BFK-XQtRBtU"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-y5zWX7g3DlA2Fgq4ellmUhfTus",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjYwQVA0TUc5NG9z",
      "snippet": {
        "publishedAt": "2024-07-14T18:00:06Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building A Basement Water Removal System",
        "description": "My mansion needs a new basement. Today I am attempting to build a water mitigation system, to prevent the basement from being wet, musty, and smelly. I shovel a lot of rock and dirt, pour concrete, calculate slope for drainage pipes, build a french drain, install a sump pump pit, and learn a lot along the way.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/60AP4MG94os/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/60AP4MG94os/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/60AP4MG94os/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/60AP4MG94os/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/60AP4MG94os/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 112,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "60AP4MG94os"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "WcXagGfFmbIGc8kruaDp7Xzlqck",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lm43a2p6aHJqd2cw",
      "snippet": {
        "publishedAt": "2024-07-11T23:15:02Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Laying Rock In The Basement (20+ Tons)",
        "description": "My mansion needs a new basement. Today I am attempting to lay rock in the basement, to allow us to pour a new concrete floor, build an internal drainage system, and build a radon mitigation system. I run the Dingo, shovel dirt, pour concrete, calculate a materials list, spread over 20 tons of rock, and learn a lot along the way.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/n7kjzhrjwg0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/n7kjzhrjwg0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/n7kjzhrjwg0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/n7kjzhrjwg0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/n7kjzhrjwg0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 113,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "n7kjzhrjwg0"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_iJ_r5iiQJFjA8DjUhBKXZj41YQ",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkVDMHV2b0JNN05N",
      "snippet": {
        "publishedAt": "2024-07-09T23:00:06Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Digging The Basement Floor",
        "description": "My mansion needs a new basement. Today I am attempting to dig out the basement, to allow us to pour a new concrete floor. I shovel dirt, run the Dingo, pour concrete, get rained out, work in the mud, and learn a lot along the way.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EC0uvoBM7NM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EC0uvoBM7NM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EC0uvoBM7NM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EC0uvoBM7NM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EC0uvoBM7NM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 114,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EC0uvoBM7NM"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "kNcQRRNVrmCQ-q2R6LtIXwlu3OM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlJzWEFpZVkzRi13",
      "snippet": {
        "publishedAt": "2024-07-06T18:00:12Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Removing The Basement Floor (Pt. 2)",
        "description": "My mansion needs a new basement. Today I am attempting to finish removing the old, broken basement floor. I jack hammer concrete, smash things with a sledge hammer, remove piles of concrete that are stacked halfway to the ceiling, attempt to keep the basement from flooding, operate heavy equipment, and play in the mud.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/RsXAieY3F-w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/RsXAieY3F-w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/RsXAieY3F-w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/RsXAieY3F-w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/RsXAieY3F-w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 115,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "RsXAieY3F-w"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-H4SIdvwMW6iNNeGaI8mzbWvnGU",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Ll9qNk93QTN0RHRZ",
      "snippet": {
        "publishedAt": "2024-07-02T21:00:29Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Removing The Basement Floor (Pt. 1)",
        "description": "My mansion needs a new basement. Today I am attempting to remove the old, broken basement floor. I break concrete, remove huge piles of dirt, jack hammer, drive heavy equipment, run a demolition saw, and rent one of the most useful machines I have ever used.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_j6OwA3tDtY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_j6OwA3tDtY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_j6OwA3tDtY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_j6OwA3tDtY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_j6OwA3tDtY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 116,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_j6OwA3tDtY"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "lF-l_iVUWa0ZwYxuWi-vZ6qiTlY",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjhEdk5OSHJ0ZjA0",
      "snippet": {
        "publishedAt": "2024-06-30T21:00:03Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building A New Basement Entrance",
        "description": "My mansion needs a new basement. Today I am attempting to build a new basement entrance, to allow equipment and materials in and out. I cut old concrete, dig a giant hole, jack hammer, run heavy equipment, and install a new support I-beam. I also discovered some interesting things, and had a lot of fun. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8DvNNHrtf04/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8DvNNHrtf04/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8DvNNHrtf04/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8DvNNHrtf04/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8DvNNHrtf04/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 117,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8DvNNHrtf04"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "F7il8gLL-lTjLU2mumI_gayNRkM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjZtRVBoY1dCTWd3",
      "snippet": {
        "publishedAt": "2024-06-28T22:00:06Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Hooking Up The Well (We Have Water!)",
        "description": "Get 20% OFF + Free International Shipping with promo code CODE - COLE at manscaped.com! #manscapedpartner \n\nI am working on my magnificent mansion, attempting to hook up the well. I dig dirt, pour concrete, wire new electrical wires, buy new parts at the store, fix a leaky pipe, run heavy equipment, fix the driveway, and more!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6mEPhcWBMgw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6mEPhcWBMgw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6mEPhcWBMgw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6mEPhcWBMgw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6mEPhcWBMgw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 118,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6mEPhcWBMgw"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "kVajnvxv48mg-tEEDBk7lOCQMI0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnhsSjBNNGhqYmZB",
      "snippet": {
        "publishedAt": "2024-06-26T22:00:36Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Removing An Old Water Line & Installing Electricity",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nWhile attempting to install a new electrical supply line to the mansion and to the well, we got into a project that was a lot bigger than expected. \n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xlJ0M4hjbfA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xlJ0M4hjbfA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xlJ0M4hjbfA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xlJ0M4hjbfA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xlJ0M4hjbfA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 119,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xlJ0M4hjbfA"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "fu-jYtqKP6LKI94U_pkv41tDQ-A",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjkwVnFBTUFCZm1v",
      "snippet": {
        "publishedAt": "2024-06-22T20:00:03Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Installing A New Main Electrical Wire",
        "description": "Save 20% on your system and your first month is free when you sign up for Fast Protect Monitoring. Visit https://SimpliSafe.com/cole to customize yours! Try SimpliSafe risk-free. If you don’t love it, return it for a full refund within 60 days.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\nWe are laying down new conduit and wire for my mansion's new electrical system.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/90VqAMABfmo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/90VqAMABfmo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/90VqAMABfmo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/90VqAMABfmo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/90VqAMABfmo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 120,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "90VqAMABfmo"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "eLarsA5e1LHwnzGx94ciw-zeUPc",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkZVcXZDZnFETThj",
      "snippet": {
        "publishedAt": "2024-06-20T22:00:07Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Trenching In New Electricity (We Hit A Wire)",
        "description": "While rebuilding the basement in my $7,000 Mansion, we decide to self install new electricity. What could go wrong?\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FUqvCfqDM8c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FUqvCfqDM8c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FUqvCfqDM8c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FUqvCfqDM8c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FUqvCfqDM8c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 121,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "FUqvCfqDM8c"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gIgsTpxhmN38bRX_CFIeGHrsxrA",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lk8zOHhuSUh5ZFl3",
      "snippet": {
        "publishedAt": "2024-06-15T23:00:10Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Farm Is Flooded",
        "description": "My farm is flooded, weeds are growing, and equipment is breaking. We have a lot of work to do. \n► Ever.Ag: https://www.ever.ag/crops/financial-services/?utm_source=Youtube&utm_medium=Organic_Post&utm_campaign=GrainFoundationsInfluencer\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/O38xnIHydYw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/O38xnIHydYw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/O38xnIHydYw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/O38xnIHydYw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/O38xnIHydYw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 122,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "O38xnIHydYw"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "257Za9Vmy5E8yR1dHh-F9Ij-0cw",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LktfQlk1TFQwbDkw",
      "snippet": {
        "publishedAt": "2024-06-12T23:45:00Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Come work with us!",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/K_BY5LT0l90/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/K_BY5LT0l90/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/K_BY5LT0l90/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/K_BY5LT0l90/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/K_BY5LT0l90/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 123,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "K_BY5LT0l90"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "KmusrufTFDHsbHZz5opPkixUDk4",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkE1LVpCT3MxVU9z",
      "snippet": {
        "publishedAt": "2024-06-11T22:00:08Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Pouring A New Concrete Foundation Pt. 3",
        "description": "Josie's Fundraiser: https://www.gofundme.com/f/support-josie-parkers-battle-against-cancer?qid=b0efbe05532cb55b6a5b78d6a1db34cb\n\nUpon discovering no footing under my foundation walls, I dive into my $7,000 mansion's largest and most challenging project yet.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/A5-ZBOs1UOs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/A5-ZBOs1UOs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/A5-ZBOs1UOs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/A5-ZBOs1UOs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/A5-ZBOs1UOs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 124,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "A5-ZBOs1UOs"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PMKBir-SuzHb6tlpJTO2v1hjKWw",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LldXMmtBYzNadmNJ",
      "snippet": {
        "publishedAt": "2024-06-08T23:00:24Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Pouring A New Concrete Foundation Pt. 2",
        "description": "After discovering no footing under my foundation walls, I am diving into my $7,000 mansion's largest and most challenging task yet. This is part 2 of the concrete foundation project. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WW2kAc3ZvcI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WW2kAc3ZvcI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WW2kAc3ZvcI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WW2kAc3ZvcI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WW2kAc3ZvcI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 125,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "WW2kAc3ZvcI"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "NbHHISmIXurQcmw1DRkBeRnC614",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmphZHBITXdKSDNj",
      "snippet": {
        "publishedAt": "2024-06-05T23:15:03Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Trying To Pour A New Foundation Under A Mansion! #construction #renovation #home",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jadpHMwJH3c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jadpHMwJH3c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jadpHMwJH3c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jadpHMwJH3c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jadpHMwJH3c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 126,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jadpHMwJH3c"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3zl1EzB95QbVxU1Mf1dYgbViNZw",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmxNdjk5OEVnenNn",
      "snippet": {
        "publishedAt": "2024-06-04T22:00:31Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Pouring A New Concrete Foundation",
        "description": "Upon discovering no footing under my foundation walls, I dive into my $7,000 mansion's largest and most challenging project yet.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/lMv998Egzsg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/lMv998Egzsg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/lMv998Egzsg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/lMv998Egzsg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/lMv998Egzsg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 127,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "lMv998Egzsg"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "VHqqRtx42ZLtNV6dxk2zAbp9ITc",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lkx0UTZjakhNWG5N",
      "snippet": {
        "publishedAt": "2024-06-01T18:00:09Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building The Attic Loft Walls",
        "description": "Use code CTC50 to get 50% OFF your first Factor box plus 20% off your next month of orders\nat https://bit.ly/3yNXRkU\n\nI am building new walls in the attic loft of my Great-Great Grandfather's $7,000 mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LtQ6cjHMXnM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LtQ6cjHMXnM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LtQ6cjHMXnM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LtQ6cjHMXnM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/LtQ6cjHMXnM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 128,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LtQ6cjHMXnM"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "oWyyG9mwptGeHhL1Tc0VS6YmvhM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmpHeUlmQkRZSUZV",
      "snippet": {
        "publishedAt": "2024-05-29T22:00:32Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building A New Servant's Staircase",
        "description": "Me, my friend Roman, and my neighbor Juston are designing and building a brand new servant's staircase in my Great-Great Grandfather's incredible $7,000 mansion. We are demolishing, designing, building, and working through all the obstacles this 107 year old house is throwing at us. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jGyIfBDYIFU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jGyIfBDYIFU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jGyIfBDYIFU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jGyIfBDYIFU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jGyIfBDYIFU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 129,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jGyIfBDYIFU"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "hK3mO1tCYxGTf9r8gvo30-zRsYQ",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnF6cWVfREl3VUVj",
      "snippet": {
        "publishedAt": "2024-05-26T18:00:33Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building 3 New Bathrooms",
        "description": "I am designing and building 3 new bathrooms in my incredible $7,000 mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/qzqe_DIwUEc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/qzqe_DIwUEc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/qzqe_DIwUEc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/qzqe_DIwUEc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/qzqe_DIwUEc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 130,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "qzqe_DIwUEc"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9PLEZjqbXXN10KQ3yFO71iUrr2Q",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlNZZ0UtalVQZENN",
      "snippet": {
        "publishedAt": "2024-05-23T23:00:13Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building An Incredible Attic Staircase",
        "description": "I am designing and building a new staircase for the incredible attic in my $7,000 mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/SYgE-jUPdCM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/SYgE-jUPdCM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/SYgE-jUPdCM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/SYgE-jUPdCM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/SYgE-jUPdCM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 131,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "SYgE-jUPdCM"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "MpQLmC-fKQEnR0Huslyxd9F9-WY",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnM3eEVYYXRUU1A0",
      "snippet": {
        "publishedAt": "2024-05-21T21:00:36Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Removing Rotten Attic Staircase",
        "description": "I am removing the old, rotten attic staircase and designing a new one in my Great-Great Grandfather's $7,000 mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/s7xEXatTSP4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/s7xEXatTSP4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/s7xEXatTSP4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/s7xEXatTSP4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/s7xEXatTSP4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 132,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "s7xEXatTSP4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "U2fpnSxfdzEeNs23-v7uaP_M7fE",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlRENmliZVZ0WUJR",
      "snippet": {
        "publishedAt": "2024-05-19T21:00:24Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: INCREDIBLE Dream Attic Rebuild (pt. 3/3)",
        "description": "I am rebuilding the incredible, massive, dream attic in my Great-Great Grandfather's $7,000 mansion. I am removing old, rotten wood, taking delivery of new materials, building a secret attic entrance, putting up new walls, and laying new flooring. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TD6ibeVtYBQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TD6ibeVtYBQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TD6ibeVtYBQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TD6ibeVtYBQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TD6ibeVtYBQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 133,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TD6ibeVtYBQ"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "BBs5OHL_fmM2VfMF7okTvrLysHM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjdSUHNObHJKVFlZ",
      "snippet": {
        "publishedAt": "2024-05-16T21:00:05Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: INCREDIBLE Dream Attic Rebuild (Pt. 2/3)",
        "description": "I am working in my mansion, fully restoring it. Due to rotten boards, 30 years of bird poop, and lack of engineered design, my mansion's incredible attic needs a complete rebuild. With the help of a few simple tools, strong hands, great friends, and a positive attitude, I try to rebuild the incredible, massive, dream attic.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7RPsNlrJTYY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7RPsNlrJTYY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7RPsNlrJTYY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7RPsNlrJTYY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7RPsNlrJTYY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 134,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "7RPsNlrJTYY"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9-LGYGt55PRbhA6jZCgp-JrAYYw",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmRJcWZJU0JvTTRF",
      "snippet": {
        "publishedAt": "2024-05-14T21:00:30Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: INCREDIBLE Dream Attic Rebuild (Pt. 1/3)",
        "description": "I am rebuilding the incredible attic in my Great-Great Grandfather's $7,000 mansion. We are tearing out rotten flooring, old insulation, and installing brand new materials. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/dIqfISBoM4E/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/dIqfISBoM4E/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/dIqfISBoM4E/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/dIqfISBoM4E/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/dIqfISBoM4E/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 135,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "dIqfISBoM4E"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CAXNLu8cDGVRgn-3kSTyLw5xmHI",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnQ1RjhTRUh1SGpn",
      "snippet": {
        "publishedAt": "2024-05-11T23:00:33Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Farm Spent $927,900 And Made $0. (Planting Is Over)",
        "description": "I traveled to the farm today, to finish planting our crops. With the help of my friends and family, I will be working around tractors, other large equipment, making on the fly repairs, working a 24 hour shift, and realizing we have spent $927,900 on this year's farming season, and made $0. \n\n► Yard Lights: https://www.nwlightingsystems.com/contact/\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/t5F8SEHuHjg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/t5F8SEHuHjg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/t5F8SEHuHjg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/t5F8SEHuHjg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/t5F8SEHuHjg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 136,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "t5F8SEHuHjg"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "YzHB621MPERbjs3E7uXfyYCyD8U",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmJuaEU2TXNEQ0JB",
      "snippet": {
        "publishedAt": "2024-05-07T22:00:21Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Rebuilding 2nd Story Floor",
        "description": "Rebuilding the 2nd story floor in my Great-Great Grandfather's incredible $7,000 mansion. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bnhE6MsDCBA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bnhE6MsDCBA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bnhE6MsDCBA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bnhE6MsDCBA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bnhE6MsDCBA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 137,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bnhE6MsDCBA"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7nb2nc9SGlOfdsKy1DDNb0WkIQ8",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjU3UzlOMzN2dFdr",
      "snippet": {
        "publishedAt": "2024-05-03T21:00:07Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "We Ruined The 340's $50,000 Engine...(THIS IS BAD)",
        "description": "I traveled to the farm today, to get our crops planted. With the help of my friends and family, I will be working around tractors, other large equipment, lighting giant piles of trees on fire, and finding out the $50,000 engine on our 340 needs to be replaced.  \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/57S9N33vtWk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/57S9N33vtWk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/57S9N33vtWk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/57S9N33vtWk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/57S9N33vtWk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 138,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "57S9N33vtWk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "O_EphBgEE2uJdtkNIVZcMmC0_DI",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lko1c21pT0hxVG00",
      "snippet": {
        "publishedAt": "2024-04-30T22:00:19Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "We Almost Had A $5,000 Farm DISASTER",
        "description": "Welcome To Episode 4 of The How To Farm Series. My name is Cole The Cornstar. I am a 26-year old farmer who farms 2,000 acres of corn and soybeans. Over the next 365 days, I will be documenting everything that happens on Cornstar Farms in an effort to show what it takes to feed the world. In today's episode, we are planting soybeans, controlling weeds in the field, and overcoming obstacles that are trying to keep us from doing those two things. \n\n► Pete Youngblut: https://www.youngblutag.com/\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/J5smiOHqTm4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/J5smiOHqTm4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/J5smiOHqTm4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/J5smiOHqTm4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/J5smiOHqTm4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 139,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "J5smiOHqTm4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Tse6KtME0jLIuA-dx6QJY7m4cG0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnY4MjZmWTZBYUJz",
      "snippet": {
        "publishedAt": "2024-04-27T20:00:28Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Our Most Reliable Tractor Has Engine Issues...",
        "description": "Welcome To The How To Farm Series. My name is Cole The Cornstar. I am a 26-year old farmer who farms 2,000 acres of corn and soybeans. Over the next 365 days, I will be documenting everything that happens on Cornstar Farms in an effort to show what it takes to feed the world. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/v826fY6AaBs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/v826fY6AaBs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/v826fY6AaBs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/v826fY6AaBs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/v826fY6AaBs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 140,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "v826fY6AaBs"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "VISIznW6_ZACSfRezISTBK0IJh4",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjZIYmF5ZnNxZmlZ",
      "snippet": {
        "publishedAt": "2024-04-24T00:30:02Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "WE PULLED Our Tractors Out Of The Shed!",
        "description": "Get free life insurance quotes from America's top insurers and start saving today with Policygenius: https://policygenius.com/colethecornstar Thanks to Policygenius for sponsoring this video!\n\nWe pulled the tractors out of the shed and finally got started working in the fields! We had a really good day and got a good start to our first days in the field. We had our fair share of problems though!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6HbayfsqfiY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6HbayfsqfiY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6HbayfsqfiY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6HbayfsqfiY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6HbayfsqfiY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 141,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6HbayfsqfiY"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "EYUgLZRLJvsCUcA8gsG9p_bmoy0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjA1MVhsTmdBV2ZN",
      "snippet": {
        "publishedAt": "2024-04-23T00:30:00Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Farm Is Projected To Lose $523,000",
        "description": "Why my family's farm is projected to lose $523,000.  \n\n► Grain Marketing (Ever.Ag) https://www.ever.ag/crops/financial-services/grain-management/foundations-grain-marketing/\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/051XlNgAWfM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/051XlNgAWfM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/051XlNgAWfM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/051XlNgAWfM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/051XlNgAWfM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 142,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "051XlNgAWfM"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "twskc4xL3ICCVqQAVJUJDbHVQZc",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lk1Ic2gxbWRMX1o4",
      "snippet": {
        "publishedAt": "2024-04-18T23:00:17Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building The Living Room Wall",
        "description": "Building a new living room wall, removing and enclosing an old window in the living room, and installing a massive I-Beam support in the basement of my Great-Great Grandfather's incredible $7,000 mansion. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/MHsh1mdL_Z8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/MHsh1mdL_Z8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/MHsh1mdL_Z8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/MHsh1mdL_Z8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/MHsh1mdL_Z8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 143,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "MHsh1mdL_Z8"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Xf6m4tke40fnW1Lrde3GYk-xi-E",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjN0UGl5aWhCWHc0",
      "snippet": {
        "publishedAt": "2024-04-16T23:00:04Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Important Farm Update",
        "description": "An important update about the farm. \n\n► Grain Marketing (Ever.Ag) https://www.ever.ag/crops/financial-services/grain-management/foundations-grain-marketing/\n\n► Rock Finding/Picking Service (TerraClear): https://www.terraclear.com/\n\n► Led Lights In Shop (NW Lighting Systems): https://www.nwlightingsystems.com/\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3tPiyihBXw4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3tPiyihBXw4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3tPiyihBXw4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3tPiyihBXw4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3tPiyihBXw4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 144,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3tPiyihBXw4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "UDyT2dToMlQWgAfUkaEe3F2sTR4",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlZtUWV3MmZLcVpz",
      "snippet": {
        "publishedAt": "2024-04-14T20:00:08Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Rebuilding Bedroom Floors",
        "description": "Rebuilding the floor and floor supports in the bedrooms of my Great-Great Grandfather's incredible $7,000 mansion. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VmQew2fKqZs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VmQew2fKqZs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VmQew2fKqZs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VmQew2fKqZs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/VmQew2fKqZs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 145,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "VmQew2fKqZs"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "z9HUKWU9m4FduCgqGzBOqv58Rp8",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjgtOEJPLUZ3bG1j",
      "snippet": {
        "publishedAt": "2024-04-12T01:15:00Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Removing 2nd Story Floor",
        "description": "Removing, designing, and rebuilding the 2nd story floor and 2nd story walls in my Great-Great Grandfather's incredible $7,000 mansion. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8-8BO-Fwlmc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8-8BO-Fwlmc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8-8BO-Fwlmc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8-8BO-Fwlmc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8-8BO-Fwlmc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 146,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8-8BO-Fwlmc"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Xkl81aufLrHxtmAewGjpiX1Uvkg",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmZtQnZCSl9GVUtJ",
      "snippet": {
        "publishedAt": "2024-04-10T01:00:26Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Building A New Living Room",
        "description": "Building the walls for the living room, kitchen pantry, master staircase, and main floor bathroom in my Great-Great Grandfather's incredible $7,000 mansion. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fmBvBJ_FUKI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fmBvBJ_FUKI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fmBvBJ_FUKI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fmBvBJ_FUKI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fmBvBJ_FUKI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 147,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fmBvBJ_FUKI"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CtVR-YmsGLXjqZzC1zhXDtqFzOA",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmdNQmcyYjlpeGI4",
      "snippet": {
        "publishedAt": "2024-04-06T22:00:19Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Rebuilding Basement Beams",
        "description": "Me and my friend Roman, and neighbor Juston, are working in the depths of my mansion's basement to rebuild floor support beams. We are removing the failed old beams, building brand new beams, knocking down old concrete walls, cutting concrete, getting new lumber, repairing the furnace, and rebuilding the mansion better than it has ever been. We are restoring my Great-Great Grandfather's $7,000 mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/gMBg2b9ixb8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/gMBg2b9ixb8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/gMBg2b9ixb8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/gMBg2b9ixb8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/gMBg2b9ixb8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 148,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "gMBg2b9ixb8"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "l547f1Q03N1vuBMMSYWMbId_WJQ",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmQyaUNQV3BzenFN",
      "snippet": {
        "publishedAt": "2024-04-05T00:00:16Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring A $7,000 Mansion: Rebuilding Basement Wall",
        "description": "I am working in my mansion, rebuilding a basement wall. I am using a few simple tools, concrete, a strong back, and some good friends.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► 15% off My Sunglasses (Auto-applied through the link): https://pitviper.biz/corncorn\n\n► Instagram: https://www.instagram.com/colethecornstar/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/d2iCPWpszqM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/d2iCPWpszqM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/d2iCPWpszqM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/d2iCPWpszqM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/d2iCPWpszqM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 149,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "d2iCPWpszqM"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 931,
    "resultsPerPage": 50
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=UUuxlXCfVyV-i5YLL30jkomw&maxResults=50&pageToken=EAAaHlBUOkNHUWlFRGc1UXpCRU9EY3hNREpCTWpOQ016SQ&key=AIzaSyCEkGuXKRRpAIMkBkeEJ0EknB-ze5233GU"},"revalidate":86400,"tags":[]}