{"kind":"FETCH","data":{"headers":{"alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Sat, 05 Jul 2025 22:21:17 GMT","server":"scaffolding on HTTPServer2","transfer-encoding":"chunked","vary":"Origin, X-Origin, Referer","x-content-type-options":"nosniff","x-frame-options":"SAMEORIGIN","x-xss-protection":"0"},"body":"{
  "kind": "youtube#playlistItemListResponse",
  "etag": "ZdNHG1puTgyLxBhPInLGfgmDSZk",
  "nextPageToken": "EAAaHlBUOkNESWlFREEyUkRreE9URkdRVFk1UWtNM05ERQ",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "f6CnPrdMEfpWRaxmjOj26FuIebg",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmE5bUszaG9hQjkw",
      "snippet": {
        "publishedAt": "2025-06-30T22:30:00Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Fixing The Basement In My Mansion (We Made Mistakes!)",
        "description": "Go to https://CovePure.com/colethecornstar to get $200 off. Thanks to CovePure for sponsoring this video!\nWe made a few mistakes fixing my mansion's basement… but we figured out how to fix them!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/a9mK3hoaB90/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/a9mK3hoaB90/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/a9mK3hoaB90/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/a9mK3hoaB90/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/a9mK3hoaB90/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "a9mK3hoaB90"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "XxXGkvnREzkHC9vi6jKAZv7XWIE",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmJ0MUU0OW44aFFF",
      "snippet": {
        "publishedAt": "2025-06-19T20:00:21Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I Searched 700 Miles of Farmland... Nothing Came Close to This",
        "description": "Go to https://drinkag1.com/colethecornstar or scan the QR code to get started with AG1 Next Gen for less than $3 a day when you subscribe. Thanks to AG1 for sponsoring today’s video!\n\nWe’re dealing with a full plate: scouting soybeans, discovering heavy weed pressure, and jumping straight into spraying. But that’s not all—I also dig a cremation burial at the local cemetery, test a new product’s conductivity, and share a new farming method we’re experimenting with this year.\n\nIf you’re into real-life farm work, or just want to see what a true farm day looks like, you’re in the right place.\n\nSubscribe for more behind-the-scenes farming content, new tools, and real-life challenges every video.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bt1E49n8hQE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bt1E49n8hQE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bt1E49n8hQE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bt1E49n8hQE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bt1E49n8hQE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bt1E49n8hQE"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "WdZ-sMeQBTdElo1l126IqnRPcU8",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnhHbi1kTFFoQkFz",
      "snippet": {
        "publishedAt": "2025-06-12T23:00:59Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Pouring The Foundation For My $7,000 Mansion's New Addition",
        "description": "Get free life insurance quotes from America's top insurers and start saving today with Policygenius: http://policygenius.com/colethecornstar Thanks to Policygenius for sponsoring this video!\n\nIn today's adventure, we have an incredibly busy day on the farm. We start off by DIY pouring the foundation for the new addition on my $7,000 mansion. We then move on to cleaning up our underground movie theater construction site, we sell some hay bales (and had a small problem), and then get started with preparing the existing basement under the mansion for waterproofing. \n\nIn an effort to reduce efflorescence on the basement walls, we started by attempting to remove all of the old oil and latex based paints that were on the walls. After a day of paint stripping and scraping, I was able to revive an old power-washer to finish the job.\n\nToday was a really good day, and we got a lot of stuff done. Thank you for watching.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xGn-dLQhBAs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xGn-dLQhBAs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xGn-dLQhBAs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xGn-dLQhBAs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xGn-dLQhBAs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xGn-dLQhBAs"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0LzFMSZvl6CiLYzgKMlWT5nNM3I",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmFPbXNYaW5EbG53",
      "snippet": {
        "publishedAt": "2025-06-10T23:00:02Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Preparing My $7,000 Mansion's New Addition For Concrete!",
        "description": "Go to https://chomps.com/COLE15 or use code COLE15 to get 15% off your Chomps order and free shipping!\n\nIn today's adventure we are running around on the farm trying to get a bunch of stuff done. Our corn crop is progressing extremely quickly and it is already knee high, which beats the old saying of \"knee high by the 4th of July\" by a month. We are also fighting wildfire smoke coming from Canada. Overall, our corn looks really good. \n\nOn the work side of things, today, we service the JCB skid-loader and bring it over to the farm to get started preparing the new foundation on the $7,000 mansion addition for concrete in the footings. In an effort to do this, we shovel, level, and pack thousands of pounds of rock, built concrete forms, prepare rebar, and do a lot of digging. \n\nOn top of getting the new addition ready for concrete, I also order and schedule a load of concrete, check on the status of the concrete forms for the foundation walls, and I work on a special midnight project. \n\nToday was a really good day, and I am going to sleep good. Thank you for watching. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/aOmsXinDlnw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/aOmsXinDlnw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/aOmsXinDlnw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/aOmsXinDlnw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/aOmsXinDlnw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "aOmsXinDlnw"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bMZhxoG1k4DB6YGscZxisxJ4g4E",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjFBZmRyZkJpNkJN",
      "snippet": {
        "publishedAt": "2025-06-07T18:00:01Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My $7,000 Mansion Is Getting Re-Designed (I Made A Mistake)",
        "description": "Download the FREE Upside App at https://upside.app.link/CORN to get an extra 25 cents back for every gallon on your first tank of gas.\n\nI am doing a 100% restoration of my Great-Great Grandfather's mansion that he purchased nearly 100 years ago, for $7,000. In today's adventure I find out we made a mistake on our build plans and then my wife and I decided to re-design nearly half the house. We also backfilled and packed the entire area outside of the underground movie, and we also finished digging the foundation for the new addition.  \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1AfdrfBi6BM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1AfdrfBi6BM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1AfdrfBi6BM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1AfdrfBi6BM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1AfdrfBi6BM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1AfdrfBi6BM"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-6ptFECbHE7QIyIipO9mU55Eu8o",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkVpUzEwUENQeWNn",
      "snippet": {
        "publishedAt": "2025-06-03T20:00:09Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Digging The Foundation For My HUGE Mansion Addition!",
        "description": "Save 50% on your system and your first month is free when you sign up for professional monitoring. Visit https://simplisafe.com/cole to customize yours! Try SimpliSafe risk-free. If you don’t love it, return it for a full refund within 60 days. Make sure to follow us on IG: @simplisafe TikTok: @simplisafe\n\nAlmost 100 years ago, my great-great grandfather bought the mansion I am restoring for $7,000. For over a year I have been rebuilding and restoring the entire thing. With the completion of the new underground movie theater addition, today I am digging the foundation for the the new addition that will go next to the new underground movie theater. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EiS10PCPycg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EiS10PCPycg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EiS10PCPycg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EiS10PCPycg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EiS10PCPycg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EiS10PCPycg"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "a_oKnTq7dch8polqIKWpHhWNN8Y",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkFvMWJFZ1NUMHlV",
      "snippet": {
        "publishedAt": "2025-05-29T20:00:14Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "SURPRISE! I Am Building Another Addition On My $7,000 Mansion",
        "description": "Go to http://thrivemarket.com/ColeTheCornstar to receive 30% off your first order AND a FREE gift when you join Thrive Market today!\n\nAfter building a new addition on the mansion my Great-Great Grandfather purchased for $7,000, I decided I wanted an even bigger house, so I am building another new addition, next to the other new addition.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Ao1bEgST0yU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Ao1bEgST0yU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Ao1bEgST0yU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Ao1bEgST0yU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Ao1bEgST0yU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Ao1bEgST0yU"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "S8oUAAK_atZ_Nz_YNY9IUsUOpoc",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlBNM2F1RUdJdVVR",
      "snippet": {
        "publishedAt": "2025-05-22T20:00:27Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "We Are Flooded Out Of Our Underground Movie Theater Build",
        "description": "Get 10% off on my new go to work socks from Camel City Mill with code CORNSTAR: https://manly.link/cole-the-cornstar\n\nIn today's adventure we attempt to finish waterproofing the outside of our underground movie theater build, but we end up getting flooded out. In an effort to keep the project moving forward, we decide to start cleaning up our incredibly messy warehouse/shop so it will make it easier and faster to work on projects in the future.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PM3auEGIuUQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PM3auEGIuUQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PM3auEGIuUQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PM3auEGIuUQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PM3auEGIuUQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PM3auEGIuUQ"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "IkKqOtLlwIhZqt7VT_KN-ctwh_Y",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjF5VDlldlRQcklR",
      "snippet": {
        "publishedAt": "2025-05-15T20:00:04Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring My $7,000 Mansion: POURING THE UNDERGROUND MOVIE THEATER!",
        "description": "Today I am pouring the concrete for my underground movie theater in my $7,000 mansion!\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1yT9evTPrIQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1yT9evTPrIQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1yT9evTPrIQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1yT9evTPrIQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1yT9evTPrIQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1yT9evTPrIQ"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "WWtv--Z6o2ggZT83dJso3qqxRWU",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkdzQnpvNG43cUlr",
      "snippet": {
        "publishedAt": "2025-05-10T18:00:11Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring My $7,000 Mansion: Pouring Underground Theater Floor - Pt. 2",
        "description": "We are getting the underground movie theater in my $7,000 mansion ready for concrete! In this video, we install floor insulation, and tie a full grid of rebar to reinforce the slab. All of this is being done in an effort to pour a concrete floor and ensure we have a strong, warm, dry, and safe underground movie theater. \n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GsBzo4n7qIk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GsBzo4n7qIk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GsBzo4n7qIk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GsBzo4n7qIk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GsBzo4n7qIk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "GsBzo4n7qIk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2lisCZDY49W6ieHCgFLkaXh0xhA",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnpxVjAtX3Vab0Y0",
      "snippet": {
        "publishedAt": "2025-05-08T21:01:05Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Restoring My $7,000 Mansion: Pouring Underground Theater Floor - Pt. 1",
        "description": "We are making big progress on the underground movie theater in my $7,000 mansion restoration project. In this video, we tackle forming and waterproofing work in preparation for pouring the concrete floor. I also get some farm work done as well. \n► Sid Dillon in Blair, Nebraska (where I got my truck) https://www.siddillon.net/new-vehicles/\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zqV0-_uZoF4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zqV0-_uZoF4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zqV0-_uZoF4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zqV0-_uZoF4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zqV0-_uZoF4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zqV0-_uZoF4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TH5NzWV4a2Sg6aHQrwIcCowL-_0",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkM5ZlZNdGcwYnJr",
      "snippet": {
        "publishedAt": "2025-05-03T17:00:12Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Burying My Underground Movie Theater In My $7,000 Mansion",
        "description": "I am burying my underground movie theater beneath my $7,000 mansion. Between renting heavy equipment, moving a ton of dirt, beating tight deadlines, purchasing materials, and an armwrestling tournament, today was a busy day. \n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/C9fVMtg0brk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/C9fVMtg0brk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/C9fVMtg0brk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/C9fVMtg0brk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/C9fVMtg0brk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "C9fVMtg0brk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ExyU-d9qniNCXReG0Q1wNOTNaGw",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlJ4Nm9BNmJ6azRJ",
      "snippet": {
        "publishedAt": "2025-04-29T20:00:28Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Getting New Build Plans For My $7,000 Mansion",
        "description": "After months of planning (and a few setbacks), my $7,000 mansion finally has a set of plans. In this video I walk through the fresh build plans, and the big ideas I have for transforming my $7,000 mansion.\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Rx6oA6bzk4I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Rx6oA6bzk4I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Rx6oA6bzk4I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Rx6oA6bzk4I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Rx6oA6bzk4I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Rx6oA6bzk4I"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "II-vn4C6JfOvqZP0H7aVwEl2C9s",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkY4ZU14cWVueEp3",
      "snippet": {
        "publishedAt": "2025-04-22T21:00:26Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I Farmed For 48-Hours Straight To Make $120,000",
        "description": "Get free life insurance quotes from America's top insurers and start saving today with Policygenius: http://policygenius.com/colethecornstar Thanks to Policygenius for sponsoring this video!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nI farmed for 48-hours with barely any sleep to make $120,000. Between long days in the tractors, breakdowns, and a tight weather window, everything was on the line. This is the real, behind the scenes look at what it takes to get a crop in when the clock's ticking and the money's massive. \n\nIn this video, I take you through the full 48-hour grind of planting non-stop, pushing limits, and doing whatever it takes to get the job done. \n\nSubscribe for more raw farming content, machine breakdowns, and real lessons from the field. \n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/F8eMxqenxJw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/F8eMxqenxJw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/F8eMxqenxJw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/F8eMxqenxJw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/F8eMxqenxJw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "F8eMxqenxJw"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "YnFoxUGd7Ulhk-0CV0b5bWdqVJQ",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlBpTTBlRFpxU2FB",
      "snippet": {
        "publishedAt": "2025-04-17T19:00:22Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "The First Day Of Planting: A $2,000,000 Gamble",
        "description": "We have waited all year for this moment. Planting season just kicked off, and this is not just another crop. With $2,000,000 riding on the line, there is no room for mistakes. Follow along as we race against time, weather, and breakdowns to get this crop in the ground.\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PiM0eDZqSaA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PiM0eDZqSaA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PiM0eDZqSaA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PiM0eDZqSaA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PiM0eDZqSaA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PiM0eDZqSaA"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Xcrl3Ksqk1v3Liw_lL_TOhcGSHk",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmhQLThrQ1QyVGgw",
      "snippet": {
        "publishedAt": "2025-04-13T19:00:35Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Farm Had A Fire",
        "description": "We are racing to get the farm ready for planting season. Cutting trees, clearing brush, removing old concrete, and getting new equipment delivered. The planter's going in the field soon, and there's no time to waste. Oh yeah, and one of our fields caught on fire.\n► CHECK OUT THE FORKLIFT HERE  ► https://rankoeq.com/\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/hP-8kCT2Th0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/hP-8kCT2Th0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/hP-8kCT2Th0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/hP-8kCT2Th0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/hP-8kCT2Th0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "hP-8kCT2Th0"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "dsZ_ZHyXD53TgNAJy3DltysaH0Q",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjBRSXBjdlp6WVk0",
      "snippet": {
        "publishedAt": "2025-04-10T23:00:04Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "This One Fix Could Make My Farm An Extra $150K A Year",
        "description": "Save 50% off your SimpliSafe security system when you sign up for a professional monitoring plan, and get your first month FREE. Visit https://SimpliSafe.com/cole to customize yours! If you don’t love it, return it for a full refund within 60 days. There’s No Safe Like SimpliSafe®\n\nThis one thing could add an extra $150,000 a year to the farm, and it is super simple, it is just not easy to do.\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0QIpcvZzYY4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0QIpcvZzYY4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0QIpcvZzYY4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0QIpcvZzYY4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0QIpcvZzYY4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0QIpcvZzYY4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "EqepCE3R3Zq2VU-DYNeKNFmHM9k",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnB1ejBKcVVlSW5F",
      "snippet": {
        "publishedAt": "2025-04-08T23:00:43Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Cleaning Up Some Of My Farm's Problems",
        "description": "My farm has a few big problems. From tractor issues to messy projects, and fixing them takes a lot of work. In this video, I fix equipment, clean up the farm, and share a $7,000 mansion update.\n► Cornstar Merch: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/puz0JqUeInE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/puz0JqUeInE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/puz0JqUeInE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/puz0JqUeInE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/puz0JqUeInE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "puz0JqUeInE"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3DvJikpC7vcjbHBEOEwU6v1B0bs",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmZXZnJkMEV5VXBF",
      "snippet": {
        "publishedAt": "2025-04-05T17:00:41Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Major Changes Are Coming To The $7,000 Mansion",
        "description": "My $7,000 Mansion has some serious design issues, and fixing them won't be easy. But while chasing solutions, I stumbled onto a wild idea that might actually work. In this video, I walk through the new plans, the problems they solve, and what it will take to pull them off. \n► Cornstar Merch: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fWfrd0EyUpE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fWfrd0EyUpE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fWfrd0EyUpE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fWfrd0EyUpE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fWfrd0EyUpE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fWfrd0EyUpE"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "UHv_jyVAdv2hFnv2GWP1BycSbII",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Llkzd0l0X2ZyWkI0",
      "snippet": {
        "publishedAt": "2025-04-04T00:00:23Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "This One Upgrade Will Change My Farm Forever",
        "description": "My farm will never be the same after today.\n► The Tire Grabber: https://thetiregrabber.ca/\n► Cornstar Merch: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Y3wIt_frZB4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Y3wIt_frZB4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Y3wIt_frZB4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Y3wIt_frZB4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Y3wIt_frZB4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Y3wIt_frZB4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TTC1c8UvmtzpPW9CXZdZkr1D6Ks",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmRoRkFVM2pNVDRN",
      "snippet": {
        "publishedAt": "2025-04-01T20:00:18Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Farm Has A $4,000,000.00 Problem",
        "description": "My farm faces a $4M problem, and fixing it won't be easy. But in search of a solution, I discovered a way to potentially turn this huge challenge into nearly $20M in profit. In this video, I share exactly how I plan to make it happen. \n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/dhFAU3jMT4M/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/dhFAU3jMT4M/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/dhFAU3jMT4M/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/dhFAU3jMT4M/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/dhFAU3jMT4M/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "dhFAU3jMT4M"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "51M-QjQd87Pob5jc5zR5e7qOkTg",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlhrdGhseEVrdnRJ",
      "snippet": {
        "publishedAt": "2025-03-29T00:30:31Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "A Day In The Life Of A YouTube Farmer (The Good, Bad, And Ugly)",
        "description": "Save 50% off your SimpliSafe security system when you sign up for a professional monitoring plan, and get your first month FREE. Visit https://SimpliSafe.com/cole to customize yours! Try SimpliSafe risk-free. If you don’t love it, return it for a full refund within 60 days. There’s No Safe Like SimpliSafe®\n\nToday I am showing a day in the life of a full-time YouTube Farmer.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XkthlxEkvtI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XkthlxEkvtI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XkthlxEkvtI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XkthlxEkvtI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XkthlxEkvtI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XkthlxEkvtI"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Q_J-eny6-bCKXCvjARRyVptlNYI",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnNjek81VW9GRmhZ",
      "snippet": {
        "publishedAt": "2025-03-26T20:00:35Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "1-Year Of Restoring A $7,000 Mansion (8,000 Hours)",
        "description": "Over the last year, I recorded the restoration of my $7,000 mansion. After working for 8,000 hours, this is what we got done.  \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sczO5UoFFhY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sczO5UoFFhY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sczO5UoFFhY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sczO5UoFFhY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sczO5UoFFhY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sczO5UoFFhY"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uQvWcZBWu7boyf7ORO3_WSQP4-4",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmZMZGF0Rk40elFN",
      "snippet": {
        "publishedAt": "2025-03-15T14:00:48Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "How My Farm Lost $100,000 & How I Will Fix It",
        "description": "I recently discovered my farm has lost $100,000. In an effort to protect my farm's livelihood, I need to come up with a solution, and fast. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fLdatFN4zQM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fLdatFN4zQM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fLdatFN4zQM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fLdatFN4zQM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fLdatFN4zQM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fLdatFN4zQM"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "C_vh0Ou-VPOKak7Pt6jO37hSXiY",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lk95cm9iaWduZ1Vr",
      "snippet": {
        "publishedAt": "2025-03-11T20:00:25Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Shopping For New Farm Equipment",
        "description": "I am looking for new equipment to improve my farm. I am going to evaluate my farm’s severe water problem, conduct a farm financial analysis, put together a order for new equipment, and work on a construction project. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/OyrobigngUk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/OyrobigngUk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/OyrobigngUk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/OyrobigngUk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/OyrobigngUk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "OyrobigngUk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-p5M8jQn42Nbr3NNX_6jbpa3XJw",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkRWTjgySDBQWlZr",
      "snippet": {
        "publishedAt": "2025-03-07T21:00:09Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "My Parent's House Needed A Huge Remodel - So I Did It Myself",
        "description": "After 100 years, my parent's house is in need of some large updates and remodels. So I grabbed a bunch of construction tools and got ready to go to work. I will be installing a new sink, water lines, drilling holes in concrete, fixing a leaky pipe, unclogging a plugged drain, and cleaning up the job site. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/DVN82H0PZVk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/DVN82H0PZVk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/DVN82H0PZVk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/DVN82H0PZVk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/DVN82H0PZVk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "DVN82H0PZVk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "IlrZ0HX-Ep-G7WBXHbQjDMo_f7c",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkJnTmhCSUd3YzE0",
      "snippet": {
        "publishedAt": "2025-03-05T22:00:13Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I TRIED REBUILDING MY PARENT'S BASEMENT",
        "description": "Rebuilding plumbing in my parent's basement, and visiting the main heated shop to see what is new on the farm. \n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BgNhBIGwc14/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BgNhBIGwc14/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BgNhBIGwc14/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BgNhBIGwc14/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BgNhBIGwc14/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 26,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BgNhBIGwc14"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ETjgQaREkc909GGW34KGbEEE_QY",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lkd0YmNvelJhU1Bz",
      "snippet": {
        "publishedAt": "2025-03-03T00:00:11Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I Tore Apart My Parent's House + My Farm's Debt Problem",
        "description": "My parent's asked for a bathroom remodel, so I did what any good son would do, and tore apart their house and got to work.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GtbcozRaSPs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GtbcozRaSPs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GtbcozRaSPs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GtbcozRaSPs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GtbcozRaSPs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 27,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "GtbcozRaSPs"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "fzm5KEtmal1iO-rdJTz3AOBCxLM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lk41R1cteE9fbUNz",
      "snippet": {
        "publishedAt": "2025-02-28T22:00:14Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "DID I BUY A LEMON?! MY BIGGEST TRACTOR BROKE AGAIN",
        "description": "Go to https://chomps.com/cole15 and use code COLE15 at checkout to get 15% and free shipping!\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\nIn today's video our biggest tractor broken down again, we got one of our semis put back together in the shop, and we tried removing old plumbing in DC's house. \n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/N5GW-xO_mCs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/N5GW-xO_mCs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/N5GW-xO_mCs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/N5GW-xO_mCs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/N5GW-xO_mCs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 28,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "N5GW-xO_mCs"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6EDgP2JROxZb1fwqWobY0zZ6uuk",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LnJ2RzBVa1ZJaXkw",
      "snippet": {
        "publishedAt": "2025-02-25T23:30:18Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "HUGE PLUMBING FAIL - WE HAD TO SHUT THE WATER OFF",
        "description": "In an attempt to save a few thousand dollars, I tackled re-plumbing my parent's house. To make a long story short, I had a plumbing fail. Here is what happened.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rvG0UkVIiy0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rvG0UkVIiy0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rvG0UkVIiy0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rvG0UkVIiy0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rvG0UkVIiy0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 29,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "rvG0UkVIiy0"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "chxyP0fMtwNQtgDhVtJSmsbqkD4",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LklYbXBCYXlJSmRr",
      "snippet": {
        "publishedAt": "2025-02-20T23:15:02Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I TRIED PLUMBING A HOUSE (WITH ZERO EXPERIENCE!)",
        "description": "Save 50% off your SimpliSafe security system when you sign up for a professional monitoring plan, and get your first month FREE. Visit https://www.Simplisafe.com/cole to customize yours! There's No Safe Like SimpliSafe.\n\nI tried plumbing a house, with zero plumbing experience. This is how it went.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/IXmpBayIJdk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/IXmpBayIJdk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/IXmpBayIJdk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/IXmpBayIJdk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/IXmpBayIJdk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 30,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "IXmpBayIJdk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "iM4fQNcL0xZ_vlPYyCEVKGF2qTM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlRFOUpTRk02M3Q0",
      "snippet": {
        "publishedAt": "2025-02-16T17:00:34Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I Found A New House To Demolish & Remodel",
        "description": "In an effort to help save $10,000, I have taken on the task of demolishing and remodeling a new bathroom in my parent's house. There is only one twist, I have never remodeled a bathroom before.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TE9JSFM63t4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TE9JSFM63t4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TE9JSFM63t4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TE9JSFM63t4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TE9JSFM63t4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 31,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TE9JSFM63t4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gU9Th49a8QsZVPE3Tt11wErfd00",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlBla2J5aWNOU2FR",
      "snippet": {
        "publishedAt": "2025-02-13T21:00:30Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Why My Underground Movie Theater Needs A Catwalk",
        "description": "I am rebuilding a run down mansion on my farm. I have gutted, rebuilt, and redesigned the entire thing and today, I am building a catwalk for the new underground movie theater addition. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PekbyicNSaQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PekbyicNSaQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PekbyicNSaQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PekbyicNSaQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PekbyicNSaQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 32,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PekbyicNSaQ"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "fGzlBnBYpGYNp6zAFeqWOMOnd9E",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lldxc1JNRTZiTnVB",
      "snippet": {
        "publishedAt": "2025-02-11T20:00:30Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I STARTED BURYING MY NEW UNDERGROUND MOVIE THEATER",
        "description": "I am rebuilding a run down mansion on my farm. I have gutted, rebuilt, and redesigned the entire thing and today, after 5 months of work, I started burying the new underground movie theater addition. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WqsRME6bNuA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WqsRME6bNuA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WqsRME6bNuA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WqsRME6bNuA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WqsRME6bNuA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 33,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "WqsRME6bNuA"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "EjtlQmkWfcrhzfUqNS2QFFgZdQ8",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lkx4RDhpMnpUMDVn",
      "snippet": {
        "publishedAt": "2025-02-06T20:00:10Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "MY UNDERGROUND MOVIE THEATER IS FINALLY WATERPROOF!",
        "description": "I am rebuilding a run down mansion on my farm. I have gutted, rebuilt, and redesigned the entire thing and today, after 5 months of work, I finished waterproofing the new underground movie theater addition. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LxD8i2zT05g/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LxD8i2zT05g/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LxD8i2zT05g/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LxD8i2zT05g/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/LxD8i2zT05g/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 34,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LxD8i2zT05g"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "e0uq1NJ9tqoNvOq3PcHQhZab5lM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkFHclM1X1BWY3F3",
      "snippet": {
        "publishedAt": "2025-02-04T21:00:07Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I TRIED TO WATERPROOF MY UNDERGROUND MOVIE THEATER...WILL IT WORK?",
        "description": "I am rebuilding a run down mansion on my farm. I have gutted, rebuilt, and redesigned the entire thing and today I am attempting to waterproof the new underground movie theater. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AGrS5_PVcqw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AGrS5_PVcqw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AGrS5_PVcqw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AGrS5_PVcqw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AGrS5_PVcqw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 35,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AGrS5_PVcqw"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "jpdYl6XaQHIO42fG87ughEl0Nng",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmVMMFI5Q1BVQWxZ",
      "snippet": {
        "publishedAt": "2025-02-01T19:00:31Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I BUILT A HEATED TENT OVER MY UNDERGROUND MOVIE THEATER",
        "description": "I am rebuilding a run down mansion on my farm. I have gutted, rebuilt, and redesigned the entire thing and today I am attempting to build a heated tent around the new underground movie theater so I can waterproof it during freezing outside conditions. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/eL0R9CPUAlY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/eL0R9CPUAlY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/eL0R9CPUAlY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/eL0R9CPUAlY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/eL0R9CPUAlY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 36,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "eL0R9CPUAlY"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7KbWCJEzUNxA74zX2Y9NdLrZ34Q",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmRVVG9WRlVQTlIw",
      "snippet": {
        "publishedAt": "2025-01-30T20:00:20Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I TRIED TO GET A FARM LOAN...HERE'S WHAT HAPPENED!",
        "description": "I am rebuilding my entire farm. From the farm's property to the farm's finances, I have pulled apart and started rebuilding everything. Today I visit with my banker to try to get a farm loan and work on waterproofing the farm house's new underground movie theater. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/dUToVFUPNR0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/dUToVFUPNR0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/dUToVFUPNR0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/dUToVFUPNR0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/dUToVFUPNR0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 37,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "dUToVFUPNR0"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "unYKBzp43tfxlfa-kI3Whinu7yM",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkozWjJUZ2NtUFNB",
      "snippet": {
        "publishedAt": "2025-01-29T18:00:13Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Help Me Tear Apart My Underground Theater! #construction",
        "description": "@ColeTheCornstar",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/J3Z2TgcmPSA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/J3Z2TgcmPSA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/J3Z2TgcmPSA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/J3Z2TgcmPSA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/J3Z2TgcmPSA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 38,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "J3Z2TgcmPSA"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "8q75i3_K6nLMxZClOFW5WbFdDkI",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LlpPRnVZaVpkVHE4",
      "snippet": {
        "publishedAt": "2025-01-28T20:00:15Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "BUILDING A WATERPROOF UNDERGROUND MOVIE THEATER IN THE SNOW",
        "description": "I am rebuilding a run down mansion on my farm. I have gutted, rebuilt, and redesigned the entire thing and today I am attempting to waterproof the underground movie theater in the snow. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ZOFuYiZdTq8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ZOFuYiZdTq8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ZOFuYiZdTq8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ZOFuYiZdTq8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ZOFuYiZdTq8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 39,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ZOFuYiZdTq8"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0xljkyiAnM9b7UvrT2s97kGbADQ",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LmJ1OThXU3o2aTlZ",
      "snippet": {
        "publishedAt": "2025-01-25T15:00:48Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I TORE APART MY UNDERGROUND MOVIE THEATER: HERE'S WHAT HAPPENED",
        "description": "I am rebuilding a run down mansion on my farm. I have gutted, rebuilt, and redesigned the entire thing and today I am removing all of the materials I used to build the underground movie theater. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bu98WSz6i9Y/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bu98WSz6i9Y/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bu98WSz6i9Y/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bu98WSz6i9Y/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bu98WSz6i9Y/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 40,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bu98WSz6i9Y"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uroVwreejFcj88c7vEK8YtJnXio",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkRvb0xaMExMaDVN",
      "snippet": {
        "publishedAt": "2025-01-24T18:00:16Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Tear Apart My Underground Movie Theater With Me!",
        "description": "@ColeTheCornstar",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/DooLZ0LLh5M/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/DooLZ0LLh5M/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/DooLZ0LLh5M/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/DooLZ0LLh5M/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/DooLZ0LLh5M/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 41,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "DooLZ0LLh5M"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ker0VE_aBWEElD-4WwGRs6mWbXY",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjdoLTZ2OV9wOVkw",
      "snippet": {
        "publishedAt": "2025-01-23T20:00:05Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I SPENT MONTHS BUILDING A MOVIE THEATER...THEN TORE IT APART",
        "description": "Get free life insurance quotes from America's top insurers and start saving today with Policygenius: http://policygenius.com/colethecornstar Thanks to Policygenius for sponsoring this video!\n\nI am rebuilding a run down mansion on my farm. I have gutted, rebuilt, and redesigned the entire thing and today I start tearing apart the brand new underground movie theater, just a few days after it was poured. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/7h-6v9_p9Y0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/7h-6v9_p9Y0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/7h-6v9_p9Y0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/7h-6v9_p9Y0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/7h-6v9_p9Y0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 42,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "7h-6v9_p9Y0"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wkreRD0LDbRQ_XEpIEWmgRMc0O4",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkFMOU55MDZsNGFJ",
      "snippet": {
        "publishedAt": "2025-01-21T20:00:06Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "WHAT NO ONE TELLS YOU ABOUT BUILDING AN UNDERGROUND MOVIE THEATER",
        "description": "I am rebuilding a run down mansion on my farm. I have gutted, rebuilt, and redesigned the entire mansion without formal training and today I start removing concrete forms in the freshly poured underground movie theater. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AL9Ny06l4aI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AL9Ny06l4aI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AL9Ny06l4aI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AL9Ny06l4aI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AL9Ny06l4aI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 43,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AL9Ny06l4aI"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QZRTRFbfGW8_OH-vZRNneeRHfgI",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lm5VY0FMck03YlVr",
      "snippet": {
        "publishedAt": "2025-01-18T18:00:35Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I BUILT A MOVIE THEATER IN MY HOUSE (AND POURED CONCRETE MYSELF!)",
        "description": "I am rebuilding a mansion on my farm which was run down and half abandoned after nearly a century of my family living there. I have gutted, rebuilt, and redesigned half of the mansion without formal training and today we are pouring concrete in the Cornstar Mansion Underground Movie Theater. Welcome to the 100% restoration of my mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nUcALrM7bUk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nUcALrM7bUk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nUcALrM7bUk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/nUcALrM7bUk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/nUcALrM7bUk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 44,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nUcALrM7bUk"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "wj-ZLn51FnYK_6v0qPvoEnrKYY8",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213Lml0enJHaFJaVU5R",
      "snippet": {
        "publishedAt": "2025-01-16T21:00:36Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I AM BUILDING A HOME MOVIE THEATER. IT IS READY FOR CONCRETE.",
        "description": "Today, my crew and I get my home movie theater addition ready for concrete. Welcome to the 100% restoration of my $7,000 mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/itzrGhRZUNQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/itzrGhRZUNQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/itzrGhRZUNQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/itzrGhRZUNQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/itzrGhRZUNQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 45,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "itzrGhRZUNQ"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "fbwxi0Qjf93JJhDPMuvEMTydT-Y",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjNYNTBzbmZKNXA4",
      "snippet": {
        "publishedAt": "2024-12-22T22:00:03Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "Building HUGE Movie Theater Walls For My $7,000 Mansion",
        "description": "Today, my crew and I build the \"second story\" of my mansion's underground movie theater's walls. Welcome to the 100% restoration of my $7,000 mansion.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3X50snfJ5p8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3X50snfJ5p8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3X50snfJ5p8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3X50snfJ5p8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3X50snfJ5p8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 46,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3X50snfJ5p8"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZbjxqbgKDd1F82VeMNnJL-V6Vv8",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjU5OFVOUHhHdVBF",
      "snippet": {
        "publishedAt": "2024-12-20T21:00:03Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I May Have To Stop Construction On My $7,000 Mansion",
        "description": "I am building an underground movie theater addition in the mansion that is on my farm. Today, my crew and I built forms for the movie theater's tall concrete walls. After spending hours building rebar cages, laying down wooden scaffolding, installing 80-pound panel forms, and cutting, bending, and measuring wood and steel, we ran out of building materials so we had to stop construction.\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\n\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/598UNPxGuPE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/598UNPxGuPE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/598UNPxGuPE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/598UNPxGuPE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/598UNPxGuPE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 47,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "598UNPxGuPE"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "r0dxoe4O1sIVjEjEfO4Y27HA5FA",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LjMxX2VuT0tWN2U0",
      "snippet": {
        "publishedAt": "2024-12-18T21:00:02Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "I Am Building A House In A Giant Mud Pit",
        "description": "To learn more about Chomps or to find one of the 20,000 stores near you that carry Chomps go to https://chomps.com/colethecornstar\n\n► MERCH: https://farmfocused.com/cole-the-corn-star/\nToday I attempted to build my house while working in a giant muddy hole.\n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/31_enOKV7e4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/31_enOKV7e4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/31_enOKV7e4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/31_enOKV7e4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/31_enOKV7e4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 48,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "31_enOKV7e4"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "58b-8PCTR4B3Q1Vp-kP31y3GOjk",
      "id": "VVV1eGxYQ2ZWeVYtaTVZTEwzMGprb213LkZ3N09mZVNwSW5z",
      "snippet": {
        "publishedAt": "2024-12-15T23:00:10Z",
        "channelId": "UCuxlXCfVyV-i5YLL30jkomw",
        "title": "The 1st Time Using My New Tractor (We Broke Stuff!)",
        "description": "► MERCH: https://farmfocused.com/cole-the-corn-star/\nIn today's adventure I get to use my new 475 horsepower tractor for the first time, we perform deep ripping tillage on 300 acres of corn fields, we start setting up concrete forms for the walls in the $7,000 Mansion's underground movie theater, and we sell a few loads of corn. \n\n► Disclosure: I receive a commission on items ordered through the links. Thank you for helping support the channel.\n\n► Fan Mail:\n    PO Box 383 \n    Waterloo, IA 50704\n\n► Business inquiries only: cornhubcole@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Fw7OfeSpIns/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Fw7OfeSpIns/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Fw7OfeSpIns/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Fw7OfeSpIns/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Fw7OfeSpIns/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Cole The Cornstar",
        "playlistId": "UUuxlXCfVyV-i5YLL30jkomw",
        "position": 49,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Fw7OfeSpIns"
        },
        "videoOwnerChannelTitle": "Cole The Cornstar",
        "videoOwnerChannelId": "UCuxlXCfVyV-i5YLL30jkomw"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 931,
    "resultsPerPage": 50
  }
}
","status":200,"url":"https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=UUuxlXCfVyV-i5YLL30jkomw&maxResults=50&key=AIzaSyCEkGuXKRRpAIMkBkeEJ0EknB-ze5233GU"},"revalidate":86400,"tags":[]}